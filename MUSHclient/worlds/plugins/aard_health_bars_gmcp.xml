<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, August 15, 2010, 9:25 PM -->
<!-- MuClient version 4.69 -->

<!-- Plugin "aard_health_bars_gmcp" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Health_Bars"
   author="Lasher and Fiendish"
   id="ef4a86dbc9cd4dd6f4c69385"
   language="Lua"
   purpose="GMCP Version of health bars"
   date_written="2010-08-15 21:25:03"
   requires="4.70"
   version="1.0"
   save_state="y"
   >
 <description trim="y">

Aardwolf GCMP based health bars

For full details on GMCP in Aardwolf see:

   http://www.aardwolf.com/wiki/index.php/Clients/GMCP

For Aardwolf specific GMCP information see:

  http://www.aardwolf.com/wiki/index.php/Clients/MushclientGMCP

Feel free to use this for any purpose on any MUD, but I'd appreciate an email if you improve
something -- wolf@aardwolf.com

</description>

</plugin>

<!--  Script  -->

<script>
<![CDATA[

require "movewindow"
require "gauge"
require "gmcphelper"

background_colour     = 0x000000
border_color          = 0xcccccc
default_width         = 398

RESIZE_TAG_SIZE = 10
MIN_SIZE        = 20
LEFT_MARGIN     = 10
TOP_MARGIN      = 5

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
page_built       = false

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

-- returns the end of the line
function Display_Styled_Line (win, font_id, styles, left, top)
  for _, v in ipairs (styles) do
    left = left + WindowText (win, font_id, v.text, left, top, 0, 0, v.textcolour)
  end -- for each style run
  return left                
end -- Display_Styled_Line


-- returns the end of the line
function Display_ColourText_Line (win, font_id, msg, left, top)
  styles = ColoursToStyles(msg)
  return Display_Styled_Line(win, font_id, styles, left, top)
end -- Display_ColourText_Line

function DisplayStatsPage()

   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank 
     
   if not page_built then
      txt = "Status bars will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, (height/2)-line_height, 0, 0, 0xeeeeee, utf8)
      txt = "once you start playing."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
   -- Only draw bars if we have data.
   else 
      local ypos = TOP_MARGIN
      local xpos = LEFT_MARGIN
      line_height = line_height
      bar_start = xpos+WindowTextWidth(win,font_id,"WWWWWW:")
      bar_width = math.max(1, width-bar_start-LEFT_MARGIN)
      Display_ColourText_Line(win,font_id,"@GHealth:@w",xpos,ypos)
      gauge(win,"Health:",tonumber(gmcpval("vitals.hp")),tonumber(gmcpval("maxstats.maxhp")),bar_start,ypos,bar_width,line_height,0x0dcc49,0x000000,3,0x002200,0x000000,nil)
      ypos = ypos + line_height
      Display_ColourText_Line(win,font_id,"@CMana  :@w",xpos,ypos)
      gauge(win,"Mana:",tonumber(gmcpval("vitals.mana")),tonumber(gmcpval("maxstats.maxmana")),bar_start,ypos,bar_width,line_height,0xcccc22,0x000000,3,0x004400,0x000000,nil) 
      ypos = ypos + line_height
      Display_ColourText_Line(win,font_id,"@YMoves :@w",xpos,ypos)
      gauge(win,"Moves:",tonumber(gmcpval("vitals.moves")),tonumber(gmcpval("maxstats.maxmoves")),bar_start,ypos,bar_width,line_height,0x00dddd,0x000000,3,0x004400,0x000000,nil) 
      ypos = ypos + line_height
      Display_ColourText_Line(win,font_id,"@WTNL   :@w",xpos,ypos)
      gauge(win,"TNL:",tonumber(gmcpval("status.tnl")),tonumber(gmcpval("base.perlevel")),bar_start,ypos,bar_width,line_height,0xdfdfdf,0x000000,3,0x004400,0x000000,nil) 
      ypos = ypos + line_height

      fighting = gmcpval("status.enemy")
      if fighting ~= "" and fighting ~= null then
         enemypct = gmcpval("status.enemypct")
         if enemypct ~= "" then
            Display_ColourText_Line(win,font_id,"@REnemy :@w",xpos, ypos)
            gauge(win,"Enemy:",enemypct,100,bar_start,ypos,bar_width,line_height,0x2222bb,0x000000,3,0x000000,0x000000,nil) 
         end
      else
            Display_Styled_Line (win, font_id, {{text="Enemy :",textcolour=0x444444}}, xpos, ypos)
      end
      
      ypos = ypos + line_height + TOP_MARGIN
   end

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   -- show it now (or refresh)
   WindowShow (win, true)
   Repaint()                 
end -- DisplayStatsPage

function RefreshPage()
   DisplayStatsPage()
end

-- returns the end of the line
function Display_Styled_Line (win, font_id, styles, left, top)
  for _, v in ipairs (styles) do
    left = left + WindowText (win, font_id, v.text, left, top, 0, 0, v.textcolour)
  end -- for each style run
  return left                
end -- Display_Styled_Line


-- returns the end of the line
function Display_ColourText_Line (win, font_id, msg, left, top)
  styles = ColoursToStyles(msg)
  return Display_Styled_Line(win, font_id, styles, left, top)
end -- Display_ColourText_Line


-- right click menu
function right_click_menu ()

    menustring ="Change Font|Reset Defaults"

    result = WindowMenu (win,
        WindowInfo (win, 14),  -- x position
        WindowInfo (win, 15),   -- y position
        menustring) -- content

   if result == "Change Font" then
       wanted_font = utils.fontpicker (font_name, font_size) --font dialog
       if wanted_font then
          font_name = wanted_font.name
          font_size = wanted_font.size
          SetVariable("width",width)
          SetVariable("height",height)
          SetVariable("font_name", font_name)
          SetVariable("font_size", font_size)
          OnPluginInstall()
       end
    elseif result == "Reset Defaults" then
       font_name        = default_font_name
       font_size        = default_font_size
       height           = orig_height
       width            = default_width
       movewindow.save_state (win)
       SetVariable("width",width)
       SetVariable("height",height)
       SetVariable("font_name",font_name)
       SetVariable("font_size",font_size)
       OnPluginInstall()
    end -- if

end -- right_click_menu


--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)

   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         page_built = false 
         return
      end

      if (text == "char.vitals" or text == "char.status" or text == "char.maxstats") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")

         luastmt = "gmcpdata = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         page_built = true
         RefreshPage()
      end
   end
end


function debugp(source,hsid)
print("------------------------------------------------------------------------------")
print("Called FROM : " .. source .. "     HOTSPOT ID: " .. hsid)
print("startx:  " .. startx .. "   starty:  " .. starty)
print("posx:  " .. posx.. "   posy: " .. posy)
print("height: " .. height .. " width: " .. width)
print("------------------------------------------------------------------------------")
end


---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   --debugp("ResizeMoveCallback()","")

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   SetUpHotspotsAndDraw(false)
end

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
    --debugp("ResizeReleaseCallback()","")
    SetUpHotspotsAndDraw()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   --debugp("mousedown",hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
      -- debugp("MouseDown")
   end

end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
   --debugp("CancelMouseDown")
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
       right_click_menu()
    end
    return true
end

function LeftClickOnly(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
        return true
    end
    return false
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()

  -- save window current location for next time  
  movewindow.save_state (win)
  
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("background_colour", background_colour)
  SetVariable ("width", width)
  SetVariable ("height", height)
  SetVariable ("font_name", font_name)
  SetVariable ("font_size", font_size)

end -- OnPluginSaveState

function OnPluginDisable ()
    WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
    WindowShow (win, true)
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall() 

   --- Get a unique name for main window
   win = GetPluginID ()  -- get a unique name

   --- Pull some state variables.
   background_colour = tonumber (GetVariable ("background_colour")) or background_colour
   height            = tonumber (GetVariable ("height")) or default_height
   orig_height = height
   width             = tonumber (GetVariable ("width")) or default_width

   -- make window so I can grab the font info
   WindowCreate (win, 600, 600, 1, 1, 0, 0, background_colour) 

   font_id        = "statmon_font"

   local fonts = utils.getfontfamilies ()

   if fonts ["Lucida Console"] then
      default_font_size = 9
      default_font_name = "Lucida Console"    -- the actual font
   elseif fonts["Dina"] then
      default_font_size = 10
      default_font_name = "Dina"
   else
      default_font_size = 9
      default_font_name = "Courier New"
   end -- if

   font_name        = GetVariable("font_name") or default_font_name
   font_size        = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
   line_height = font_height + 1

   --- install the window movement handler, get back the window position.
   windowinfo  = movewindow.install (win, 6, 2, true, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})

   MIN_SIZE = (WindowTextWidth(win, font_id, "WWWWW:")+LEFT_MARGIN)*2
   height = (TOP_MARGIN*2)+(5*line_height)
   width = math.max(width, MIN_SIZE)
   
   --- Setup the window.
   SetUpHotspotsAndDraw(true)
   
end

--=================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================
function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
       check (WindowCreate (win, 
                 windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
                 width,     -- width
                 height,  -- height
                 windowinfo.window_mode,       -- auto-position: middle right
                 windowinfo.window_flags,  -- flags
                 background_colour) )                
       -- Add the drag handler so they can move the window around
       movewindow.add_drag_handler (win, 0, 0, 0, 0)
       -- Add handler for resizing
       WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
       WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
   else
       -- everything has already been made
       -- just move them back into place
       WindowResize(win, width, height, background_colour)
       WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end
   
      -- draw edge frame.
   check (WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15))
   check (WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15))

   DisplayStatsPage()
end

-------------------------------------------------------------------------------
--- Calculate width of a line of styled text without drawing it.
-------------------------------------------------------------------------------
function styleWidth(styles) 
    local s = ""
    for _,w in ipairs (styles) do
       s = s .. w.text
    end
    return WindowTextWidth(win,font_id,s)
end -- styleWidth

]]>


</script>
</muclient>
