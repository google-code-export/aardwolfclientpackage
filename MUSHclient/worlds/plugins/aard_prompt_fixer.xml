<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Prompt_Fixer"
   author="Fiendish"
   id="1b55534ef093aaa6d1fa021c"
   language="Lua"
   purpose="Fixes prompt at startup so triggers work consistently"
   date_written="2011-12-07"
   requires="4.73"
   version="1.0"
   save_state="y"
>
<description trim="y">
If your prompt does not end in %c then anchored triggers will not fire consistently,
as some lines will get stuck on the end of your prompt. That is bad. This plugin
adds %c to the end of your prompts if you don't already have one so that all 
triggers work correctly. The idea for this plugin is based on other plugins by 
Bast and WinkleWinkle.
</description>
</plugin>

<triggers>
<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^Your game prompt is  : (.*)"
   sequence="100"
   name="prompt"
   send_to="12"
   script="prompt_rec"
   group="prompts"
>
</trigger>
  
<trigger
   enabled="n"
   regexp="y"
   omit_from_output="y"
   match="^Your battle prompt is: (.*)"
   sequence="100"
   send_to="12"
   name="bprompt"
   script="prompt_rec"
   group="prompts"
>
</trigger>
  
<trigger
   enabled="n"
   omit_from_output="y"
   regexp="y"
   match="^(.*)$"
   sequence="101"
   name="gags"
   group="gags"
>
</trigger>
  
<trigger
   enabled="n"
   omit_from_output="y"
   match="*Use the Channels command to see communication toggles.*"
   sequence="99"
   name="config_end"
   script="gags_off"
   send_to="12"
   group="gags"
>
</trigger>


<trigger
   enabled="n"
   omit_from_output="y"
   match="-----------------------------------------------------------------------"
   sequence="100"
   send_to="12"
   name="last_line_gag"
   script="cleanup_gags"
>
</trigger>

<trigger
   enabled="n"
   omit_from_output="y"
   match="*Prompt set to*"
   sequence="100"
   send_to="12"
   name="prompt_set_gag"
   script="cleanup_gags"
>
</trigger>

<trigger
   enabled="n"
   omit_from_output="y"
   match="Use the 'bprompt' to set a separate battle prompt."
   sequence="100"
   send_to="12"
   name="use_bprompt_msg_gag"
   script="cleanup_gags"
>
</trigger>

<trigger
   enabled="n"
   omit_from_output="y"
   match="Battle prompt set to*"
   sequence="100"
   send_to="12"
   name="bprompt_set_gag"
   script="cleanup_gags"
>
</trigger>

<trigger
   enabled="n"
   omit_from_output="y"
   match="(You currently display (\d+) lines per page.|You do not page long messages.)"
   regexp="y"
   sequence="100"
   send_to="12"
   name="catch_pagesize"
   script="catch_pagesize"
>
</trigger>

<trigger
   enabled="n"
   omit_from_output="y"
   regexp="y"
   match="^Page size set to (\d+) lines.$"
   sequence="100"
   send_to="12"
   name="gag_pagesize_message"
   script="cleanup_gags"
>
</trigger>

</triggers>

<script>
<![CDATA[

rprompt = ""
bprompt = ""
stats = nil
docheck = true

-- functions for handling Aardwolf color codes
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

-- The action begins here
function checkprompt()
   if stats and stats.status and stats.status.state and
      (tonumber(stats.status.state) == 3 or
      tonumber(stats.status.state) == 9 or
      tonumber(stats.status.state) == 11) then
         EnableTrigger("catch_pagesize", true)
         SendNoEcho("pagesize")
   end
end

pagesize = nil
-- see if we need to temporarily adjust pagesize to prevent paging during
-- config output
function catch_pagesize (name, line, wildcards)
   EnableTrigger("catch_pagesize", false)
   EnableTriggerGroup("prompts", true)
   EnableTriggerGroup("gags", true)
   pagesize = tonumber(wildcards[2])
   if pagesize ~= nil then
      SendNoEcho("pagesize 0")
   end
   SendNoEcho("config")
end

function cleanup_gags (name, line, wildcards)
   EnableTrigger(name, false)
end

function gags_off (name, line, wildcards)
   EnableTriggerGroup("gags", false)
   if pagesize ~= nil then
      -- had to temporarily set pagesize 0 before, so now undo
      EnableTrigger("gag_pagesize_message", true)
      SendNoEcho("pagesize "..pagesize)
   end
end

adjusted = {}
-- received a prompt line in the config output
function prompt_rec (name, line, wildcards, styles)
   -- StylesToColoursOneLine gets the color codes without resorting to the hideous
   -- rawcolors server setting that can break other scripts
   prompt = Trim(string.gsub(Trim(StylesToColoursOneLine(styles,24)),"^(.-)@w$","%1")) -- eliminates a trailing @w and dangling white space
   if prompt:sub(-2) ~= "%c" then
      table.insert(adjusted, name)
      EnableTrigger(name.."_set_gag", true)
      EnableTrigger("use_bprompt_msg_gag", true)
      SendNoEcho(name.." ".. prompt .. "%c")
   end
   if name == "bprompt" then
      EnableTrigger("last_line_gag", true)
      EnableTriggerGroup("prompts", false)
      docheck = false
      if #adjusted ~= 0 then
         print("\nThe Aardwolf MUSHclient Package has adjusted your "..string.gsub(table.concat(adjusted," and "),"bprompt","battleprompt").." to end in '%c'.\nThis is necessary for triggers to work consistently.")
      end
      adjusted = {}
   end
end

function OnPluginBroadcast (msg, id, name, text)
   if id == "3e7dedbe37e44942dd46d264" and text == "char.status" and docheck then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", "char")
      stats = assert (loadstring ("return " .. gmcparg or ""))()
      checkprompt()
   end
end

function OnPluginInstall ()
   OnPluginEnable()
end -- OnPluginInstall


function OnPluginEnable ()
   if IsConnected() then
      Execute("sendgmcp request char")
   end
end -- OnPluginEnable

]]>
</script>
</muclient>
