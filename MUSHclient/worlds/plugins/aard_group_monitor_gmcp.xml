<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Group_Monitor"
   author="Fiendish"
   id="f178e68512c685b3be1e9b07"
   language="Lua"
   purpose="Aardwolf Group Monitor"
   date_written="2010-12-13 15:35:02"
   requires="4.71"
   version="1.0"
   save_state="y"
   >

<description trim="y">

Aardwolf Group Monitor

Gives a persistant visual display of the status of your group members using
details captured through GMCP.

</description>

</plugin>


<!--  Triggers  -->

<triggers>  

 <trigger
   enabled="y"
   regexp="y"
   match="^(?<leader>.*) has kicked you from the group."
   script="leaveGroup"
   sequence="100"
  >
  </trigger>
  
   <trigger
   enabled="y"
   regexp="y"
   match="^You have removed yourself from group: (?<groupname>.*)$"
   script="leaveGroup"
   sequence="100"
  >
  </trigger>
  
   <trigger
   enabled="y"
   regexp="y"
   match="\(Group\) The group has been disbanded by (?<leader>.*)\."
   script="leaveGroup"
   sequence="100"
  >
  </trigger>
  
  <trigger
  enabled="y"
  regexp="y"
  match="^You are not{ currently}? in a group.$"
  script="leaveGroup"
  sequence="100"
  >
  </trigger>
</triggers>

<script>
<![CDATA[

require "gauge"
require "movewindow"
require "mw"
require "gmcphelper"
require "copytable"
require "serialize"

background_colour = tonumber (GetVariable ("background_colour")) or 0x000000
title_colour = tonumber (GetVariable ("title_colour")) or 0x292929
default_height = 100
default_width = 100
default_font_name = ""
default_font_size = 0
height = tonumber (GetVariable ("height")) or default_height
width = tonumber (GetVariable ("width")) or default_width
show_self = tonumber (GetVariable ("show_self")) or 0
GAP = 5
font_size = 0
font_name = ""
border_color = 0xdddddd
title_gradient_col1 = 0x151515
title_gradient_col2 = 0x444444
group_members = {}
group_info = {}

local defaultColorVals = {Health={0x00ff00,0x004400}, Mana={0xff5500,0x442200}, Moves={0x00ffff,0x004444}, Align={0x0000ff,0x00ffff}}
colorVals = defaultColorVals
local barIndex = {"Health", "Mana", "Moves", "Align"}

RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100

-- Variables not saved.
startx      = ""  
starty      = ""
posx        = "" 
posy        = ""
font_height = 0

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
       check (WindowCreate (win, 
             windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
             width,     -- width
             height,  -- height
             windowinfo.window_mode,       -- auto-position: middle right
             windowinfo.window_flags,  -- flags
             background_colour) )
       -- Add the drag handler so they can move the window around
       movewindow.add_drag_handler (win, 0, 0, 0, 0)

       -- Add handler for resizing
       WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
       WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
   else
       -- everything has already been made
       -- just move them back into place
       WindowResize(win, width, height, background_colour)
       WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end

   DisplayMapPage()
end

string.lpad = function(str, len, char)
    if char == nil then char = ' ' end
    return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
    if char == nil then char = ' ' end
    return str .. string.rep(char, len - #str)
end

function RemoveSelfFromGroupDisplay()
    for i,v in ipairs(group_data["members"]) do
       if (v["name"] == char_data["name"]) then
          table.remove(group_data["members"], i)
       end
    end
end

function DisplayMapPage()
   group_data = copytable.deep(full_group_data)
   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank
   
   -- title rectangle
   title_height = line_height*2+2
   WindowGradient(win, 2, 2, -2, title_height, title_gradient_col1, title_gradient_col2, 2)
   WindowLine(win, 0, title_height, width, title_height, 0xeeeeee, 0, 1)

   if not group_built then
      txt = "No Group To Display"
      txtlen = WindowTextWidth(win,font_id, txt)
      WindowText(win, font_id, txt, (width-txtlen)/2, title_height/4, 0, 0, 0xeeeeee, utf8)
      txt = "Group info will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
      txt = "once you create or join one."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee, utf8)
   else
      styles = ColoursToStyles(group_data["groupname"])
      x = GAP
      y = 2
      x = x + WindowText(win, font_id, "Group: ", x, y, 0, 0, 0xeeeeee, utf8)
      for _, v in ipairs (styles) do
         x = x + WindowText (win, font_id, v.text, x, y, 0, 0, v.textcolour)
      end -- for each style run
      WindowText(win, font_id, group_data["status"], width-WindowTextWidth(win, font_id, group_data["status"])-GAP, y, 0, 0, ((group_data["status"]=="Private" and 0x0000ff) or 0x00ff00), utf8)
      y = y + line_height
      WindowText(win, font_id, "Leader: "..group_data["leader"], GAP, y, 0, 0, 0xeeeeee, utf8)
      WindowText(win, font_id, "Exp: "..group_data["exp"].." - Kills: "..group_data["kills"], width-WindowTextWidth(win, font_id, "Exp: "..group_data["exp"].." - Kills: "..group_data["kills"])-GAP, y, 0,0, 0xeeeeee, utf8)
      y = title_height
      
      if (show_self == 0 and char_data ~= nil) then
          RemoveSelfFromGroupDisplay()
      end
      if #group_data["members"] > 0 then
          -- MAIN DISPLAY BODY
          baseX = GAP
          baseY = y+GAP
          column_width = WindowTextWidth(win, font_id, "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW")+GAP*4
          num_columns = math.max(math.floor(width / column_width), 1)
          members_per_col = math.ceil((#group_data["members"])/num_columns)
          labels_width = math.max(WindowTextWidth(win, font_id, "HP"), WindowTextWidth(win, font_id, "MN"), WindowTextWidth(win, font_id, "MV"))
          bar_width = column_width - GAP*4 - labels_width - WindowTextWidth(win, font_id, "88888\\88888")
          for i,v in ipairs(group_data["members"]) do
            if (i ~= 1) and ((i-1) % members_per_col == 0) then
                baseY = title_height+GAP
                y = baseY
                baseX = baseX + column_width
                x = baseX
            else
                baseY = y + GAP
                y = baseY
                x = baseX
            end
           -- txt = "["..(("P" and v["info"]["status"]["poisoned"] == true) or "_")..
           --     (("B" and v["info"]["status"]["blind"] == true) or "_")..
           --     (("W" and v["info"]["status"]["webbed"] == true) or "_")..
           --     (("C" and v["info"]["status"]["cursed"] == true) or "_")..
           --     (("*" and v["info"]["status"]["attacked"] == true) or "_").."]"
           -- WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
           -- x = x + math.max(WindowTextWidth(win, font_id, "[PBWC*]"), WindowTextWidth(win, font_id, "[_____]")) + GAP
            txt = "["..string.lpad(v["info"]["lvl"], 3, ' ').."]"
            x = x + WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8) + GAP
            txt = string.rpad(v["name"], 12, ' ')
            zeroed_alignment = v["info"]["align"]+2500
            name_colour = ((zeroed_alignment<=1625 and colorVals["Align"][1]) or ((zeroed_alignment>=3375 and colorVals["Align"][2]) or 0xeeeeee))
            x = x + WindowText(win, font_id, txt, x, y, 0, 0, name_colour, utf8) + GAP
            txt = "Qt: "..string.lpad(v["info"]["qt"], 2, ' ').." - ".."TNL: "..string.lpad(v["info"]["tnl"], 5, ' ')
            WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
            -- HP BAR
            y = y + line_height + 1
            x = baseX
            WindowText(win, font_id, "HP", x, y, 0, 0, 0xeeeeee, utf8)
            x = x + labels_width + GAP
            gauge(win, "HP", tonumber(v["info"]["hp"]), tonumber(v["info"]["mhp"]), x, y, bar_width, line_height, colorVals["Health"][1], 0x000000, 3, 0x000000, colorVals["Health"][2], nil)
            txt = string.lpad(v["info"]["hp"], 5, ' ').."\\"..v["info"]["mhp"]
            WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
            -- MANA BAR
            y = y + line_height + 1
            x = baseX
            WindowText(win, font_id, "MN", x, y, 0, 0, 0xeeeeee, utf8)
            x = x + labels_width + GAP
            gauge(win, "MN", tonumber(v["info"]["mn"]), tonumber(v["info"]["mmn"]), x, y, bar_width, line_height, colorVals["Mana"][1], 0x000000, 3, 0x000000, colorVals["Mana"][2], nil)
            txt = string.lpad(v["info"]["mn"],5,' ').."\\"..v["info"]["mmn"]
            WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
            -- MOVES BAR
            y = y + line_height + 1
            x = baseX
            WindowText(win, font_id, "MV", x, y, 0, 0, 0xeeeeee, utf8)
            x = x + labels_width + GAP
            gauge(win, "MV", tonumber(v["info"]["mv"]), tonumber(v["info"]["mmv"]), x, y, bar_width, line_height, colorVals["Moves"][1], 0x000000, 3, 0x000000, colorVals["Moves"][2], nil)
            txt = string.lpad(v["info"]["mv"],5,' ').."\\"..v["info"]["mmv"]
            WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
            y = y + line_height + GAP
            WindowLine(win, baseX-GAP, y, baseX+column_width-GAP+1, y, 0xeeeeee, 0, 1) -- horizontal line
            WindowLine(win, baseX+column_width-GAP, baseY-GAP, baseX+column_width-GAP, y, 0xeeeeee, 0, 1) -- vertical line
          end
      else
          txt = "You group is empty."
          txtlen = WindowTextWidth(win,font_id, txt)
          WindowText(win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
      end
   end

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   -- show it now (or refresh)
   WindowShow (win, true)
   --Redraw()
   BroadcastPlugin (999, "repaint")
                 
end -- Display_Map

function right_click_menu ()

    menustring ="!Change Font|"..((show_self==1 and "+") or "").."Show Self In Group".."|>Configure Colors|>Health|Main|Border|<|>Mana|Main|Border|<|>Moves|Main|Border|<|>Align|Evil|Good|<|<|-|Reset Defaults"
    result = WindowMenu (win,
        WindowInfo (win, 14),  -- x position
        WindowInfo (win, 15),   -- y position
        menustring) -- content

    if result ~= "" then
        numResult = tonumber(result)
        if numResult == 1 then
           wanted_font = utils.fontpicker (font_name, font_size) --font dialog
           if wanted_font then
              font_name = wanted_font.name
              font_size = wanted_font.size
           end
        elseif numResult == 2 then
           show_self = (((show_self == 0) and 1) or 0)
           if (show_self == 0) then
              ColourNote("yellow", "", "You will no longer see your own status in the group monitor.")
           else
              ColourNote("yellow", "", "You will now see your own status in the group monitor.")
           end
        elseif numResult >= 3 and numResult <= 10 then
           local colourIndex = 2
           if (numResult % 2 == 1) then
              colourIndex = 1
           end
           local newcolour = PickColour (colorVals[barIndex[math.ceil((numResult-2)/2)]][colourIndex])
           if newcolour ~= -1 then
              colorVals[barIndex[math.ceil((numResult-2)/2)]][colourIndex] = newcolour
           end
        elseif numResult == 11 then
           font_name        = default_font_name
           font_size        = default_font_size
           height           = default_height
           width            = default_width
           show_coords      = 0
        end -- if
       -- save and reload
       OnPluginSaveState()
       OnPluginInstall()
    end
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         group_built = false
         self_built = false
         return
      end

      if (text == "group") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","group")
         luastmt = "full_group_data = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.base")
         if gmcparg ~= "" then
            luastmt = "char_data = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
         else
            ColourNote("yellow","","Something may be wrong with the group monitor plugin. Please disconnect and reconnect to the MUD to correct this problem.")
         end
         group_built = true
         DisplayMapPage()
      end
   end
end

function debugp(source,hsid)
print("------------------------------------------------------------------------------")
print("Called FROM : " .. source .. "     HOTSPOT ID: " .. hsid)
print("startx:  " .. startx .. "   starty:  " .. starty)
print("posx:  " .. posx.. "   posy: " .. posy)
print("height: " .. height .. " width: " .. width)
print("------------------------------------------------------------------------------")
end

function ResizeMoveCallback()
   --debugp("ResizeMoveCallback()","")

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   height = height + posy - starty
   starty = posy
   if (height < title_height+(4*line_height)+(3*GAP)) then
      height = title_height+(4*line_height)+(3*GAP)
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   SetUpHotspotsAndDraw(false)
end

function ResizeReleaseCallback()
    --debugp("ResizeReleaseCallback()","")
    SetUpHotspotsAndDraw(true)
end

function MouseDown(flags, hotspot_id)
   -- debugp("mousedown",hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
      -- debugp("MouseDown")
   end
end

function CancelMouseOver (flags, hotspotid)
end -- cancelmouseover

function CancelMouseDown(flags, hotspot_id)
end

function MouseUp(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
       right_click_menu()
    end
    return true
end

function LeftClickOnly(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
        return true
    end
    return false
end

function leaveGroup (name, line, wildcards, styles)
    if (wildcards == nil) or (wildcards["leader"] == nil and wildcards["groupname"] == nil) or (wildcards["leader"] == group_data["leader"] or wildcards["groupname"] == strip_colours(group_data["groupname"])) then
        group_built = false
        full_group_data = {}
        group_data = {}
        DisplayMapPage()
    end
end

function OnPluginConnect()
    Send_GMCP_Packet("rawcolor on")
    Send_GMCP_Packet("group on")
    Send_GMCP_Packet("request char")
    Send_GMCP_Packet("request group")
end

function OnPluginSaveState ()
  -- save window current location for next time  
  movewindow.save_state (win)

  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("background_colour", background_colour)
  SetVariable ("title_colour", title_colour)  
  SetVariable ("width", width)
  SetVariable ("height", height)
  SetVariable ("font_name", font_name)
  SetVariable ("font_size", font_size)
  SetVariable ("show_self", show_self)
  SetVariable ("colorVals", serialize.save ("colorVals"))

end -- OnPluginSaveState

function OnPluginDisable ()
    WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
    WindowShow (win, true)
end -- OnPluginEnable

function OnPluginInstall() 
   --- Get a unique name for main window and resizer window.
   win = GetPluginID ()  -- get a unique name
   
   -- make window so I can grab the font info
   WindowCreate (win, width, height, 1, 1, 0, 0, background_colour) 

   font_id        = "font"
   font_id_bold   = "font_bold"

   local fonts = utils.getfontfamilies ()

   -- if not there already, add it
   if not fonts.Dina then
     AddFont (GetInfo (66) .. "\\Dina.fon")
     fonts = utils.getfontfamilies ()
   end -- if Dina not installed

   if fonts["Courier New"] then
      default_font_size = 9
      default_font_name = "Courier New"
   elseif fonts ["Dina"] then
      default_font_size = 8
      default_font_name = "Dina"    -- the actual font
   else
      default_font_size = 9
      default_font_name = "Lucida Console"
   end -- if

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
   WindowFont (win, font_id_bold, font_name, font_size+1, false, false, false, false) -- bold font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   line_height = font_height + 1

   --- install the window movement handler, get back the window position.
   windowinfo  = movewindow.install (win, miniwin.pos_center, 0, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})

   colorVals = defaultColorVals
   assert (loadstring (GetVariable ("colorVals") or "")) ()
   
   if IsConnected() then
     OnPluginConnect()
   end
   
   -- Draw the initial group window
   SetUpHotspotsAndDraw(true)
end

]]>

</script>

</muclient>
