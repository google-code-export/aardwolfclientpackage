<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Group_Monitor"
   author="Fiendish"
   id="f178e68512c685b3be1e9b07"
   language="Lua"
   purpose="Aardwolf Group Monitor"
   date_written="2010-12-13 15:35:02"
   requires="4.73"
   version="2.0"
   save_state="y"
   >

<description trim="y">

Aardwolf Group Monitor

Gives a persistant visual display of the status of your group members using
details captured through GMCP.

</description>

</plugin>

<aliases>
    -- show the group window
    <alias
    match="groupon"
    enabled="y"
    sequence="100"
    omit_from_output="y"
    script="ShowIt"
    ></alias>

    -- hide the group window
    <alias
    match="groupoff"
    enabled="y"
    sequence="100"
    omit_from_output="y"
    script="HideIt"
    ></alias>
</aliases>

<script>
<![CDATA[

require "gauge"
require "movewindow"
require "mw"
require "gmcphelper"
require "copytable"
require "serialize"

background_colour = tonumber (GetVariable ("background_colour")) or 0x000000
title_colour = tonumber (GetVariable ("title_colour")) or 0x292929
default_height = 100
default_width = 100
default_font_name = ""
default_font_size = 0
height = tonumber (GetVariable ("height")) or default_height
width = tonumber (GetVariable ("width")) or default_width
show_self = tonumber (GetVariable ("show_self")) or 1
show_hp = tonumber (GetVariable ("show_hp")) or 1
show_mn = tonumber (GetVariable ("show_mn")) or 1
show_mv = tonumber (GetVariable ("show_mv")) or 1
hidden = tonumber (GetVariable ("hidden")) or 0
flat_gauges = tonumber (GetVariable("flat_gauges")) or 0
overlay_numbers = tonumber (GetVariable("overlay_numbers")) or 0
GAP = 3
font_size = 0
font_name = ""
border_color = 0xdddddd
title_gradient_col1 = 0x151515
title_gradient_col2 = 0x444444
group_members = {}
group_info = {}

local defaultColorVals = {Health={0x00ff00,0x004400}, Mana={0xff5500,0x442200}, Moves={0x00ffff,0x004444}, Align={0x0000ff,0x00ffff}}
colorVals = defaultColorVals
assert (loadstring (GetVariable ("colorVals") or "")) ()

thresh1active = tonumber (GetVariable("thresh1active")) or 0
thresh2active = tonumber (GetVariable("thresh2active")) or 0
thresh1percent = tonumber (GetVariable("thresh1percent")) or 40
thresh2percent = tonumber (GetVariable("thresh2percent")) or 20
thresh1color = tonumber (GetVariable("thresh1color")) or 0x00ffff
thresh2color = tonumber (GetVariable("thresh2color")) or 0x0000ff

local barIndex = {"Health", "Mana", "Moves", "Align"}

RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100

-- Variables not saved.
startx      = ""  
starty      = ""
posx        = "" 
posy        = ""
font_height = 0
hidden_members = {}

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

-- functions for handling Aardwolf color codes
dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")

function SetUpHotspotsAndDraw(firstTime)
   -- don't use windowcreate after the first time, because it messes with hotspot handlers
   if (firstTime == true) then
       check (WindowCreate (win, 
             windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
             width,     -- width
             height,  -- height
             windowinfo.window_mode,       -- auto-position: middle right
             windowinfo.window_flags,  -- flags
             background_colour) )
       -- Add the drag handler so they can move the window around
       movewindow.add_drag_handler (win, 0, 0, 0, 0)

       -- Add handler for resizing
       WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
       WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
       CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win) -- fail silently
   else
       -- everything has already been made
       -- just move them back into place
       WindowResize(win, width, height, background_colour)
       WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end
   if hidden == 0 then
      WindowShow (win, true)
   end
   DisplayGroupPage()
end

string.lpad = function(str, len, char)
    if char == nil then char = ' ' end
    return string.rep(char, len - #str) .. str
end

string.rpad = function(str, len, char)
    if char == nil then char = ' ' end
    return str .. string.rep(char, len - #str)
end

function RemoveMembersFromGroupDisplay()
    -- hide self if applicable
    if (show_self == 0) and (char_data ~= nil) then
        for i,v in ipairs(group_data["members"]) do
            if v["name"] == char_data["name"] then
              table.remove(group_data["members"], i)
            end
        end
    end
    
    -- hide other hidden members (inefficient method, but who cares)
    for k,v in pairs(hidden_members) do
        for i,v in ipairs(group_data["members"]) do
            if v["name"] == k then
              table.remove(group_data["members"], i)
              break
            end
        end
    end
end

-- put all current group members into the hidden_members list
function hideAllMembers()
    if full_group_data and full_group_data["members"] and char_data and char_data["name"] then
        for i,v in ipairs(full_group_data["members"]) do
            if v["name"] ~= char_data["name"] then
                hidden_members[v["name"]] = true
            end
        end
    end
end

-- build and draw the group display
function DisplayGroupPage()
   group_data = copytable.deep(full_group_data)
   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank
   
   -- title rectangle
   title_height = line_height*2+2
   WindowGradient(win, 2, 2, -2, title_height, title_gradient_col1, title_gradient_col2, 2)
   WindowLine(win, 0, title_height, width, title_height, 0xeeeeee, 0, 1)

   if not group_built then
      txt = "No Group To Display"
      txtlen = WindowTextWidth(win,font_id, txt)
      WindowText(win, font_id, txt, (width-txtlen)/2, title_height/4, 0, 0, 0xeeeeee, utf8)
      txt = "Group info will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
      txt = "once you create or join one."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee, utf8)
   else
      styles = ColoursToStyles(group_data["groupname"])
      x = GAP
      y = 2
      x = x + WindowText(win, font_id, "Group: ", x, y, 0, 0, 0xeeeeee, utf8)
      for _, v in ipairs (styles) do
         x = x + WindowText (win, font_id, v.text, x, y, 0, 0, v.textcolour)
      end -- for each style run
      WindowText(win, font_id, group_data["status"], width-WindowTextWidth(win, font_id, group_data["status"])-GAP, y, 0, 0, ((group_data["status"]=="Private" and 0x0000ff) or 0x00ff00), utf8)
      y = y + line_height
      WindowText(win, font_id, "Leader: "..group_data["leader"], GAP, y, 0, 0, 0xeeeeee, utf8)
      WindowText(win, font_id, "Exp: "..group_data["exp"].." - Kills: "..group_data["kills"], width-WindowTextWidth(win, font_id, "Exp: "..group_data["exp"].." - Kills: "..group_data["kills"])-GAP, y, 0,0, 0xeeeeee, utf8)
      y = title_height
      
      RemoveMembersFromGroupDisplay()
      if #group_data["members"] > 0 then
          -- MAIN DISPLAY BODY
          baseX = GAP
          baseY = y+GAP
          column_width = WindowTextWidth(win, font_id, "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW")+GAP*4
          if overlay_numbers == 0 then
             column_width = column_width+WindowTextWidth(win, font_id, "WWWW")
          end
          num_columns = math.max(math.floor(width / column_width), 1)
          members_per_col = math.ceil((#group_data["members"])/num_columns)
          labels_width = math.max(WindowTextWidth(win, font_id, "HP"), WindowTextWidth(win, font_id, "MN"), WindowTextWidth(win, font_id, "MV"))
          bar_width = column_width - GAP*4 - labels_width
          if overlay_numbers == 0 then
             bar_width = bar_width - WindowTextWidth(win, font_id, "88888/88888")
          end
          for i,v in ipairs(group_data["members"]) do
            if (i ~= 1) and ((i-1) % members_per_col == 0) then
                baseY = title_height+GAP-1
                y = baseY
                baseX = baseX + column_width
                x = baseX
            else
                baseY = y + GAP-1
                y = baseY
                x = baseX
            end
           -- txt = "["..(("P" and v["info"]["status"]["poisoned"] == true) or "_")..
           --     (("B" and v["info"]["status"]["blind"] == true) or "_")..
           --     (("W" and v["info"]["status"]["webbed"] == true) or "_")..
           --     (("C" and v["info"]["status"]["cursed"] == true) or "_")..
           --     (("*" and v["info"]["status"]["attacked"] == true) or "_").."]"
           -- WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
           -- x = x + math.max(WindowTextWidth(win, font_id, "[PBWC*]"), WindowTextWidth(win, font_id, "[_____]")) + GAP
            txt = "["..string.lpad(v["info"]["lvl"], 3, ' ').."]"
            x = x + WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8) + GAP
            txt = string.rpad(v["name"], 12, ' ')
            zeroed_alignment = v["info"]["align"]+2500
            name_colour = ((zeroed_alignment<=1625 and colorVals["Align"][1]) or ((zeroed_alignment>=3375 and colorVals["Align"][2]) or 0xeeeeee))
            x = x + WindowText(win, font_id, txt, x, y, 0, 0, name_colour, utf8) + GAP
            txt = "Q:"..string.lpad(v["info"]["qt"], 2, ' ')..", ".."TNL:"..string.lpad(v["info"]["tnl"], 5, ' ')
            WindowText(win, font_id, txt, x, y, 0, 0, 0xeeeeee, utf8)
            y = y + line_height + 1

            if show_hp == 1 then -- HP BAR
                x = baseX
                WindowText(win, font_id, "HP", x, y, 0, 0, 0xeeeeee, utf8)
                x = x + labels_width + GAP
                local hpColor1 = colorVals["Health"][1]
                local hpColor2 = colorVals["Health"][2]
                local hpPercent = 100
                if tonumber(v["info"]["hp"]) and tonumber(v["info"]["mhp"]) then
                    hpPercent = 100* (tonumber(v["info"]["hp"]) / tonumber(v["info"]["mhp"]))
                end
                if thresh1active == 1 then
                    if hpPercent < thresh1percent then
                        hpColor1 = thresh1color
                        hpColor2 = thresh1color
                    end
                end
                if thresh2active == 1 then
                    if hpPercent < thresh2percent then
                        hpColor1 = thresh2color
                        hpColor2 = thresh2color
                    end
                end
                gauge(win, "HP", tonumber(v["info"]["hp"]), tonumber(v["info"]["mhp"]), x, y, bar_width, line_height, hpColor1, 0x000000, 0, 0x000000, hpColor2, nil, flat_gauges==1)
			    txt = string.lpad(v["info"]["hp"], 5, ' ').."/"..string.rpad(v["info"]["mhp"],5,' ')
                if overlay_numbers == 1 then
                    txtlen = WindowTextWidth(win,font_id,txt)
                    outlined_text(win, font_id, txt, baseX+labels_width+((bar_width-txtlen)/2)+(GAP), y, 0, 0, 0xeeeeee, utf8)
                else
                    WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
                end
			    y = y + line_height + 1
            end

			if show_mn == 1 then-- MANA BAR
                x = baseX
                WindowText(win, font_id, "MN", x, y, 0, 0, 0xeeeeee, utf8)
                x = x + labels_width + GAP
                gauge(win, "MN", tonumber(v["info"]["mn"]), tonumber(v["info"]["mmn"]), x, y, bar_width, line_height, colorVals["Mana"][1], 0x000000, 0, 0x000000, colorVals["Mana"][2], nil, flat_gauges==1)
                txt = string.lpad(v["info"]["mn"],5,' ').."/"..string.rpad(v["info"]["mmn"],5,' ')
                if overlay_numbers == 1 then
                    txtlen = WindowTextWidth(win,font_id,txt)
                    outlined_text(win, font_id, txt, baseX+labels_width+((bar_width-txtlen)/2)+(GAP), y, 0, 0, 0xeeeeee, utf8)
                else
                    WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
                end
                y = y + line_height + 1
			end

			if show_mv == 1 then -- MOVES BAR
                x = baseX
                WindowText(win, font_id, "MV", x, y, 0, 0, 0xeeeeee, utf8)
                x = x + labels_width + GAP
                gauge(win, "MV", tonumber(v["info"]["mv"]), tonumber(v["info"]["mmv"]), x, y, bar_width, line_height, colorVals["Moves"][1], 0x000000, 0, 0x000000, colorVals["Moves"][2], nil, flat_gauges==1)
                txt = string.lpad(v["info"]["mv"],5,' ').."/"..string.rpad(v["info"]["mmv"],5,' ')
                if overlay_numbers == 1 then
                    txtlen = WindowTextWidth(win,font_id,txt)
                    outlined_text(win, font_id, txt, baseX+labels_width+((bar_width-txtlen)/2)+(GAP), y, 0, 0, 0xeeeeee, utf8)
                else
                    WindowText(win, font_id, txt, baseX+labels_width+bar_width+(2*GAP), y, 0, 0, 0xeeeeee, utf8)
                end
			    y = y + line_height+1
			end
            y = y + GAP - 2            
            WindowLine(win, baseX-GAP, y, baseX+column_width-GAP+1, y, 0xeeeeee, 0, 1) -- horizontal line
            WindowLine(win, baseX+column_width-GAP, baseY-GAP+2, baseX+column_width-GAP, y, 0xeeeeee, 0, 1) -- vertical line
          end
      else
          txt = "Your group is empty."
          txtlen = WindowTextWidth(win,font_id, txt)
          WindowText(win, font_id, txt, (width-txtlen)/2, (height+line_height)/2, 0, 0, 0xeeeeee, utf8)
      end
   end

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   --Redraw()
   BroadcastPlugin (999, "repaint")
                 
end -- Display_Map

function validate_percent(input)
    if string.sub(input, -1) == "%" then
        input = string.sub(input, 1,-2)
    end
    local inputNum = tonumber(input)
    if not inputNum or inputNum < 1 or inputNum > 100 or inputNum % 1 ~= 0 then
        ColourNote("white","red","'"..input.."' is not a whole number between 1 and 100. Try again.")
        return false
    end
    return true
end

function right_click_menu ()

    menustring ="!Change Font|>Show Players|"..((show_self==1 and "+") or "").."Include Self|All Others|No Others|-|"
    local member_count = 0
    local member_names = {}
    if full_group_data and full_group_data["members"] and char_data and char_data["name"] then
        for i,v in ipairs(full_group_data["members"]) do
            if v["name"] ~= char_data["name"] then
                menustring = menustring..(((hidden_members[v["name"]] == nil) and "+") or "")..v["name"].."|"
                member_count = member_count + 1
                table.insert(member_names, v["name"])
            end
        end
    end
    menustring = menustring.."<|-|>Configure Colors|>Health|Main|Border|<|>Mana|Main|Border|<|>Moves|Main|Border|<|>Align|Evil|Good|<|<|>Show Info|"..((show_hp==1 and "+") or "").."Health|"..((show_mn==1 and "+") or "").."Mana|"..((show_mv==1 and "+") or "").."Moves|<|"..((flat_gauges==1 and "+") or "").."Use Flat Gauges|"..((overlay_numbers==1 and "+") or "").."Overlay Numbers|>HP Thresholds|>First|"..(((thresh1active == 1) and "+") or "").."Activate|Set Percent ("..thresh1percent.."%)|Set Color ("..RGBColourToName(thresh1color)..")|<|>Second|"..(((thresh2active == 1) and "+") or "").."Activate|Set Percent ("..thresh2percent.."%)|Set Color ("..RGBColourToName(thresh2color)..")|<|<|-|Bring To Front|Send To Back|-|Reset Defaults"
    result = WindowMenu (win,
        WindowInfo (win, 14),  -- x position
        WindowInfo (win, 15),   -- y position
        menustring) -- content
    
    if result ~= "" then
        local reload = false
        numResult = tonumber(result)
        if numResult == 1 then
           -- change font
           wanted_font = utils.fontpicker (font_name, font_size) --font dialog
           if wanted_font then
              font_name = wanted_font.name
              font_size = wanted_font.size
              reload = true
           end
        elseif numResult == 2 then
           -- show/hide self
           show_self = (((show_self == 0) and 1) or 0)
           if (show_self == 0) then
              ColourNote("yellow", "", "You will no longer see your own status in the group monitor.")
           else
              ColourNote("yellow", "", "You will now see your own status in the group monitor.")
           end
           reload = true
        elseif numResult == 3 then
           -- remove all from the hidden list
           hidden_members = {}
           reload = true
        elseif numResult == 4 then
           -- add all to the hidden list
           hideAllMembers()
           reload = true
        elseif numResult >= 5 and numResult <= member_count+4 then
           -- add/remove members in the hidden list
           local adjustedNumResult = numResult - 4
           hidden_members[member_names[adjustedNumResult]] = (((hidden_members[member_names[adjustedNumResult]]== nil) and true) or nil)
           reload = true
        elseif numResult >= member_count+5 and numResult <= member_count+12 then
           -- change color settings
           local adjustedNumResult = numResult-member_count-4
           local colourIndex = 2
           if (adjustedNumResult % 2 == 1) then
              colourIndex = 1
           end
           local newcolour = PickColour (colorVals[barIndex[math.ceil(adjustedNumResult/2)]][colourIndex])
           if newcolour ~= -1 then
              colorVals[barIndex[math.ceil(adjustedNumResult/2)]][colourIndex] = newcolour
           end
           reload = true
        elseif numResult == member_count+13 then
           -- show/hide HP info
           show_hp = (((show_hp == 0) and 1) or 0)
           if (show_hp == 0) then
              ColourNote("yellow", "", "You will no longer see HP info in the group monitor.")
           else
              ColourNote("yellow", "", "You will now see HP info in the group monitor.")
           end
           reload = true
        elseif numResult == member_count+14   then
           -- show/hide MANA info
           show_mn = (((show_mn == 0) and 1) or 0)
           if (show_mn == 0) then
              ColourNote("yellow", "", "You will no longer see MN info in the group monitor.")
           else
              ColourNote("yellow", "", "You will now see MN info in the group monitor.")
           end
           reload = true
        elseif numResult == member_count+15 then
           -- show/hide MOVES info
           show_mv = (((show_mv == 0) and 1) or 0)
           if (show_mv == 0) then
              ColourNote("yellow", "", "You will no longer see MV info in the group monitor.")
           else
              ColourNote("yellow", "", "You will now see MV info in the group monitor.")
           end
           reload = true
        elseif numResult == member_count+16 then
            -- use flat/shaded gauges
            flat_gauges = (((flat_gauges == 0) and 1) or 0)
            reload = true
        elseif numResult == member_count+17 then
            -- toggle overlay numbers on top of gauges
            overlay_numbers = (((overlay_numbers == 0) and 1) or 0)
            reload = true
        elseif numResult == member_count+18 then
            thresh1active = (((thresh1active == 0) and 1) or 0)
            reload = true
        elseif numResult == member_count+19 then
            local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #1", thresh1percent, nil, nil, {validate=validate_percent})
            if perc then
                if string.sub(perc, -1) == "%" then
                    perc = string.sub(perc, 1,-2)
                end
                thresh1percent = perc
                reload = true
            end
        elseif numResult == member_count+20 then
            local newColor = PickColour (thresh1color)
            if newcolor ~= -1 then
                thresh1color = newColor
                reload = true
            end
        elseif numResult == member_count+21 then
            thresh2active = (((thresh2active == 0) and 1) or 0)
            reload = true
        elseif numResult == member_count+22 then
            local perc = utils.inputbox( "I want the HP bars to change color when they drop below this percent...\n(enter a whole number between 1 and 100)", "Group Monitor HP Threshold #2", thresh2percent, nil, nil, {validate=validate_percent})
            if perc then
                if string.sub(perc, -1) == "%" then
                    perc = string.sub(perc, 1,-2)
                end
                thresh2percent = perc
                reload = true
            end
        elseif numResult == member_count+23 then
            local newColor = PickColour (thresh2color)
            if newcolor ~= -1 then
                thresh2color = newColor
                reload = true
            end
        elseif numResult == member_count+24 then
           -- bring to front
           CallPlugin("462b665ecb569efbf261422f","boostMe", win)
        elseif numResult == member_count+25 then
           -- send to back
           CallPlugin("462b665ecb569efbf261422f","dropMe", win)        
        elseif numResult == member_count+26 then
           -- reset
           font_name        = default_font_name
           font_size        = default_font_size
           height           = default_height
           width            = default_width
           show_coords      = 0
           reload = true
        end -- if

       if reload then
           -- save and reload
           OnPluginSaveState()
           OnPluginInstall()
       end
    end
end -- right_click_menu

--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         group_built = false
         self_built = false
         return
      end

      if (text == "group") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","group")
         luastmt = "full_group_data = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char.base")
         if gmcparg ~= "" then
            luastmt = "char_data = " .. gmcparg
            assert (loadstring (luastmt or "")) ()
         else
            ColourNote("yellow","","Something may be wrong with the group monitor plugin. Please disconnect and reconnect to the MUD to correct this problem.")
         end
         if (full_group_data.groupname == "") then
             leaveGroup()
         else
             group_built = true
             DisplayGroupPage()
		 end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

function ResizeMoveCallback()

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   height = height + posy - starty
   starty = posy
   local min_lines = 1
   if show_hp == 1 then
     min_lines = min_lines + 1
   end
   if show_mn == 1 then
     min_lines = min_lines + 1
   end
   if show_mv == 1 then
     min_lines = min_lines + 1
   end
   if (height < title_height+(min_lines*line_height)+(2*GAP)+min_lines-1) then
      height = title_height+(min_lines*line_height)+(2*GAP)+min_lines-1
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   SetUpHotspotsAndDraw(false)
end

function ResizeReleaseCallback()
    SetUpHotspotsAndDraw(true)
end

function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end

function CancelMouseOver (flags, hotspotid)
end -- cancelmouseover

function CancelMouseDown(flags, hotspot_id)
end

function MouseUp(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
       right_click_menu()
    end
    return true
end

function LeftClickOnly(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
        return true
    end
    return false
end

function leaveGroup (name, line, wildcards, styles)
    if (wildcards == nil) or (wildcards["leader"] == nil and wildcards["groupname"] == nil) or (wildcards["leader"] == group_data["leader"] or wildcards["groupname"] == strip_colours(group_data["groupname"])) then
        group_built = false
        full_group_data = {}
        group_data = {}
        DisplayGroupPage()
    end
end

function OnPluginConnect()
    Send_GMCP_Packet("rawcolor on")
    Send_GMCP_Packet("group on")
    Send_GMCP_Packet("request char")
    Send_GMCP_Packet("request group")
end

function OnPluginSaveState ()
  -- save window current location for next time  
  movewindow.save_state (win)

  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("background_colour", background_colour)
  SetVariable ("title_colour", title_colour)  
  SetVariable ("width", width)
  SetVariable ("height", height)
  SetVariable ("font_name", font_name)
  SetVariable ("font_size", font_size)
  SetVariable ("show_self", show_self)
  SetVariable ("show_hp", show_hp)
  SetVariable ("show_mn", show_mn)
  SetVariable ("show_mv", show_mv)
  SetVariable ("hidden", hidden)
  SetVariable ("colorVals", serialize.save ("colorVals"))
  SetVariable ("flat_gauges", flat_gauges)
  SetVariable ("overlay_numbers", overlay_numbers)
  SetVariable ("thresh1active", thresh1active)
  SetVariable ("thresh2active", thresh2active)
  SetVariable ("thresh1percent", thresh1percent)
  SetVariable ("thresh2percent", thresh2percent)
  SetVariable ("thresh1color", thresh1color)
  SetVariable ("thresh2color", thresh2color)
end -- OnPluginSaveState

function OnPluginClose ()
   OnPluginDisable()
end

function HideIt()
    WindowShow( win, false )
    hidden = 1
    OnPluginSaveState()
end

function ShowIt()
    WindowShow (win, true)
    hidden = 0
    OnPluginSaveState()
end

function OnPluginDisable ()
   OnPluginSaveState()
   WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
   if hidden == 0 then
      WindowShow (win, true)
   end
   OnPluginSaveState()
end -- OnPluginEnable

first_check = false
win = GetPluginID()
require "checkplugin"
function OnPluginListChanged ()
  do_plugin_check_now ("abc1a0944ae4af7586ce88dc", "aard_repaint_buffer") -- check we have the repaint buffer plugin
  do_plugin_check_now ("3e7dedbe37e44942dd46d264", "aard_GMCP_handler")    -- check we have GMCP plugin
  if not first_check then
      do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor")    -- check we have z order plugin
      first_check = true
      OnPluginInstall() -- run install again now that the z order plugin is loaded
  end
end -- OnPluginListChanged

function OnPluginInstall()
   -- make window so I can grab the font info
   WindowCreate (win, width, height, 1, 1, 0, 0, background_colour) 

   font_id        = "font"
   font_id_bold   = "font_bold"

   local fonts = utils.getfontfamilies ()

   -- if not there already, add it
   if not fonts.Dina then
     AddFont (GetInfo (66) .. "\\Dina.fon")
     fonts = utils.getfontfamilies ()
   end -- if Dina not installed

   if fonts["Courier New"] then
      default_font_size = 9
      default_font_name = "Courier New"
   elseif fonts ["Dina"] then
      default_font_size = 8
      default_font_name = "Dina"    -- the actual font
   else
      default_font_size = 9
      default_font_name = "Lucida Console"
   end -- if

   font_name = GetVariable("font_name") or default_font_name
   font_size = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
   WindowFont (win, font_id_bold, font_name, font_size+1, false, false, false, false) -- bold font

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   line_height = font_height + 1

   --- install the window movement handler, get back the window position.
   windowinfo = movewindow.install (win, miniwin.pos_center, 0, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})
   
   if IsConnected() then
     OnPluginConnect()
   end
   
   -- if disabled last time, stay disabled
   if GetVariable ("enabled") == "false" then
      ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
      check (EnablePlugin(GetPluginID (), false))
      return
   end -- they didn't enable us last time

   -- Draw the initial group window
   SetUpHotspotsAndDraw(true)
end

]]>

</script>

</muclient>
