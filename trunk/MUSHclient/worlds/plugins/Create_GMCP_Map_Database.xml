<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Create_GMCP_Map_Database"
   author="Nick Gammon"
   id="d91afe8ae0ad44e3910e94ce"
   language="Lua"
   purpose="Creates the GMCP Map database from an XML file"
   save_state="y"
   date_written="2010-03-04 09:10:51"
   requires="4.50"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Type "create map database" to run.
]]>
</description>

</plugin>

<aliases>
  <alias
   script="create_map_database"
   match="create gmcp database"
   enabled="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[

count = 0
roomcount = 0
endroomcount = 0
areacount = 0
coordcount = 0
directioncount = 0
environmentcount = 0

entities = { ['&amp;']  = '&';
             ['&quot;'] = '"';
             ['&lt;']   = '<';
             ['&gt;']   = '>';
           }
       
directions = {}
    
convert_direction = {
  north = "n",
  south = "s",
  east = "e",
  west = "w",
  up = "u",
  down = "d",
  northeast = "ne",
  northwest = "nw",
  southeast = "se",
  southwest = "sw",
  ['in'] = "in",
  out = "out",
  }
  
function process_area (args)
 
  if not args.id and args.name then
    return "Need id and name"
  end -- if
  
  areacount = areacount + 1
 
  dbcheck (db:execute (string.format (
    "INSERT INTO areas (uid, name, date_added, texture, color) VALUES (%s, %s, DATETIME('NOW'), %s, %s);",
      fixsql (args.id), 
      fixsql (args.name),
      fixsql (args.texture),
      fixsql (args.col)
    )))
          
end --  process_area 

function  process_environment (args)
 
  if not args.id and args.name and args.color then
    return "Need id, name, color"
  end -- if
  
  environmentcount = environmentcount + 1
  
  dbcheck (db:execute (string.format (
    "INSERT INTO environments (uid, name, color, date_added) VALUES (%s, %s, %i, DATETIME('NOW'));",
      fixsql (args.id), 
      fixsql (args.name),
      args.color
    )))
               
end --  process_environment 

function  process_info (args)
 
  if not args.flags then
    return "Need flags"
  end -- if
  
  info = args.flags
               
end --  process_environment 
          
function process_start_room (args)
  if not args.id and args.area and args.title and args.environment then
    return "Need id, area, title, environment"
  end -- if

  roomcount = roomcount + 1
  
  SetStatus ("Processing room " .. args.id ..  " (" .. roomcount .. ") - " .. args.title )

  room = { id = args.id, area = args.area, title = args.title, terrain = args.environment }
  exits = {}
  coords = {}
  info = nil
end -- process_start_room

function process_end_room ()
  endroomcount = endroomcount + 1
  local building = coords.building
  local x, y, z = coords.x or 0, coords.y or 0, coords.z or 0
  dbcheck (db:execute (string.format (
    "INSERT INTO rooms (uid, name, area, terrain, building, info, x, y, z, date_added) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, DATETIME('NOW'));",
      fixsql (room.id), 
      fixsql (room.title),
      fixsql (room.area),
      fixsql (room.terrain),
      fixsql (building),
      fixsql (info),
      fixsql (coords.x),
      fixsql (coords.y),
      fixsql (coords.z)
    )))
  
  for dir, exit in pairs (exits) do
     dbcheck (db:execute (string.format ([[
        INSERT INTO exits (dir, fromuid, touid, date_added) 
            VALUES (%s, %s, %s, DATETIME('NOW'));
      ]], fixsql  (dir),  -- direction (eg. "n")
          fixsql  (room.id),         -- from current room
          fixsql  (exit)    -- destination room
          )))
  end -- for each exit

  dbcheck (db:execute (string.format ([[
    INSERT INTO rooms_lookup (uid, name) VALUES (%s, %s);
  ]], fixsql  (room.id),       
      fixsql  (room.title) 
      )))
            
end -- process_end_room

function process_coord (args)
  coordcount = coordcount + 1
  coords = { x = args.x, y = args.y, z = args.z, building = args.building, area = args.area }
end -- process_coord

function process_exit (args)

  if not args.direction and args.target then
    return "Need direction and target"
  end -- if

  directioncount = directioncount + 1
  
  if  not convert_direction [args.direction] then
    print ("Don't know of direction", args.direction)
  end -- if
  
  directions [args.direction] = (directions [args.direction] or 0) + 1
  exits [(convert_direction [args.direction]) or args.direction] = args.target
end -- process_exit

function dbcheck (code)

 if code ~= sqlite3.OK and    -- no error
    code ~= sqlite3.ROW and   -- completed OK with another row of data
    code ~= sqlite3.DONE then -- completed OK, no more rows
    local err = db:errmsg ()  -- the rollback will change the error message
    db:exec ("ROLLBACK")      -- rollback any transaction to unlock the database
    error (err, 2)            -- show error in caller's context
  end -- if

end -- dbcheck 

function fixsql (s)
  if s then
    return "'" .. (string.gsub (s, "'", "''")) .. "'" -- replace single quotes with two lots of single quotes
  else
    return "NULL"
  end -- if
end -- fixsql

function fixbool (b)
  if b then
    return 1
  else
    return 0
  end -- if
end -- fixbool

function ignore (args)
  -- ignore this tag
end -- ignore

handlers = {
  areas = ignore,
  map = ignore,
  rooms = ignore,
  environments = ignore,
  ["/areas"] = ignore,
  ["/rooms"] = ignore,
  ["/map"] = ignore,
  ["/environments"] = ignore,
  
  area = process_area,
  room = process_start_room,
  coord = process_coord,
  environment = process_environment,
  exit = process_exit,
  info = process_info,
  ["/room"] = process_end_room,
  }
  
function get_params (s)
  local t = {}
  
  for name, contents in string.gmatch (s, '(%a+)="([^"]*)"') do
    t [name] = string.gsub (contents, '&%a-;', entities)
  end -- for
  
  return t

end -- get_params

function create_map_database (name, line, wildcards)

  local filename = utils.filepicker ("Mapper database", "", "xml", { xml = "XML files", ["*"] = "All files" }, false)
  
  if not filename then
    return -- they cancelled
  end

  -- open database on disk 
  db = assert (sqlite3.open(GetInfo (66) .. Trim (WorldName ()) .. ".db") )
  
  -- create rooms table
  dbcheck (db:execute[[
  
  PRAGMA foreign_keys = ON;
  PRAGMA journal_mode=WAL;
  
  DROP TABLE IF EXISTS exits;
  DROP TABLE IF EXISTS rooms;
  DROP TABLE IF EXISTS areas;
  DROP TABLE IF EXISTS environments;
  
  CREATE TABLE areas (
      areaid      INTEGER PRIMARY KEY AUTOINCREMENT,
      uid         TEXT    NOT NULL,   -- vnum or how the MUD identifies the area
      name        TEXT,               -- name of area
      date_added  DATE,               -- date added to database
      texture     TEXT,               -- background area texture
      color       TEXT,               -- RGB room colour code so we don't conflict with texture
      UNIQUE (uid)
    );

  
  CREATE TABLE environments (
      environmentid INTEGER PRIMARY KEY AUTOINCREMENT,
      uid           TEXT    NOT NULL,   -- code for the environment
      name          TEXT,               -- name of environment
      color         INTEGER,            -- ANSI colour code
      date_added    DATE,               -- date added to database
      UNIQUE (uid)
    );
    
  CREATE INDEX IF NOT EXISTS name_index ON environments (name);

  CREATE TABLE rooms (
      roomid        INTEGER PRIMARY KEY AUTOINCREMENT,
      uid           TEXT NOT NULL,   -- vnum or how the MUD identifies the room
      name          TEXT,            -- name of room
      area          TEXT,            -- which area
      building      TEXT,            -- which building it is in
      terrain       TEXT,            -- eg. road OR water
      info          TEXT,            -- eg. shop,postoffice
      notes         TEXT,            -- player notes
      x             INTEGER,
      y             INTEGER,
      z             INTEGER,
      date_added    DATE,            -- date added to database
      UNIQUE (uid)
    );

  CREATE INDEX IF NOT EXISTS info_index ON rooms (info);
  CREATE INDEX IF NOT EXISTS terrain_index ON rooms (terrain);
  CREATE INDEX IF NOT EXISTS area_index ON rooms (area);   
           
  CREATE TABLE exits (
      exitid      INTEGER PRIMARY KEY AUTOINCREMENT,
      dir         TEXT    NOT NULL, -- direction, eg. "n", "s"
      fromuid     STRING  NOT NULL, -- exit from which room (in rooms table)
      touid       STRING  NOT NULL, -- exit to which room (in rooms table)
      date_added  DATE,             -- date added to database
      FOREIGN KEY(fromuid) REFERENCES rooms(uid)
    );
  CREATE INDEX IF NOT EXISTS fromuid_index ON exits (fromuid);
  CREATE INDEX IF NOT EXISTS touid_index   ON exits (touid);
  
  DROP TABLE IF EXISTS rooms_lookup;
      
  CREATE VIRTUAL TABLE rooms_lookup USING FTS3(uid, name);
  ]])
  
  
  db:exec ("BEGIN TRANSACTION;") 
    
  for line in io.lines (filename) do
    
    local xml = string.match (line, "^%s*<(.-)/?>%s*$")
    
    if xml then
      local tag, things = string.match (xml, "^([%a/]+)%s*(.*)$")
      
      if tag then
        local f = handlers [tag]
        if f then
          local t = get_params (things)
          local problem = f (t)
          if problem then
            print ("Error (" .. problem .. ") processing XML:", xml)
          end -- if
        else
          print ("unprocessed line:", xml)
        end -- if tag not known
            
        count = count + 1
        
        else
          print ("No tag found on line:", xml)
        end -- if tag
      
      else
        print ("Line not processed:", line)
    end -- if xml
    
  end --  for each line
  
  db:exec ("COMMIT;") 
  
  print ("Found", count, "xml lines")
  print ("Found", areacount, "areas")
  print ("Found", roomcount, "rooms")
  print ("Found", endroomcount, "/rooms")
  print ("Found", coordcount, "coordinates")
  print ("Found", directioncount, "directions")
  print ("Found", environmentcount, "environments")

end -- function create_map_database

]]>
</script>

</muclient>
