<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Aardwolf_Health_Bars"
   author="Lasher and Fiendish"
   id="eb06f6479dcccfb9ec12cc7a"
   language="Lua"
   purpose="GMCP Version of health bars"
   date_written="2010-11-04 22:02:03"
   requires="4.56"
   version="1.0"
   save_state="y"
   >
 <description trim="y">

Aardwolf GCMP based health status bars.

This plugin fits two purposes:

1. Replaces the existing health status bars with a mini-window based GMCP version.
2. A reference implementation for lots of window features sure as title bars, draggable position,
   resizing, right-click menus, etc. 

Many of these add-ons are based on the work of others, including Nick Gammon (movewindow, oh and
writing Mushclient in the first place), Fiendish (resize tab), Blainer (Menus and Buttons), Bast
(parsing options, lots of plugin helper modules).

The 'styles' stuff is no longer used. I left this code in here because it will be important
for anything that wants to use non-ANSI colors and/or re-display text captured from the MUD.

For full details on GMCP in Aardwolf see:

   http://www.aardwolf.com/wiki/index.php/Clients/GMCP

For Aardwolf specific GMCP information see:

  http://www.aardwolf.com/wiki/index.php/Clients/MushclientGMCP

Feel free to use this for any purpose on any MUD, but I'd appreciate an email if you improve
something -- wolf@aardwolf.com

</description>

</plugin>

<!--  Script  -->

<script>
<![CDATA[

require "serialize"
require "movewindow"
require "mw"
require "gauge"
require "commas"

background_colour     = 0x000000
title_colour          = 0x292929
border_color          = 0xcccccc
title_gradient_col1   = 0x050505
title_gradient_col2   = 0x333333
default_width         = 400
default_height        = 400

--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100
TITLE_HEIGHT    = 20
LEFT_MARGIN     = 10
TOP_MARGIN      = 5
HEALTH_BARS     =  1

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
cstyles          = { }
tstyles          = { }
page_built       = false
max_line         = ""

function BuildStatsPage()
   max_line = ""

   tstyles = { }
   cstyles = { }

   --- Check if we have data in each category, but only as much as necessary - once page built we can stop.
   if (page_built == false and (gmcpval("worth") == "" or gmcpval("vitals") == "" or gmcpval("stats") == "" or 
       gmcpval("status") == "" or gmcpval("maxstats") == "" )) then return end

   page_built = true

   fstr = "@GStrength     : @C\[@W%3d@C/@W%-3d@C\]     @GHealth  : @C\[@W%6d@C/@W%6d@C\]@w"
   s = fstr:format(gmcpval("stats.str"),gmcpval("maxstats.maxstr"),gmcpval("vitals.hp"),gmcpval("maxstats.maxhp"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end

   fstr = "@GIntelligence : @C\[@W%3d@C/@W%-3d@C\]     @GMana    : @C\[@W%6d@C/@W%6d@C\]@w"
   s = fstr:format(gmcpval("stats.int"),gmcpval("maxstats.maxint"),gmcpval("vitals.mana"),gmcpval("maxstats.maxmana"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GWisdom       : @C\[@W%3d@C/@W%-3d@C\]     @GMoves   : @C\[@W%6d@C/@W%6d@C\]@w"
   s = fstr:format(gmcpval("stats.wis"),gmcpval("maxstats.maxwis"),gmcpval("vitals.moves"),gmcpval("maxstats.maxmoves"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GDexterity    : @C\[@W%3d@C/@W%-3d@C\]@w"
   s = fstr:format(gmcpval("stats.dex"),gmcpval("maxstats.maxdex"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GConstitution : @C\[@W%3d@C/@W%-3d@C\]     @GHitroll : @C\[@W%5d@C\]@w"
   s = fstr:format(gmcpval("stats.wis"),gmcpval("maxstats.maxwis"),gmcpval("stats.hr"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GLuck         : @C\[@W%3d@C/@W%-3d@C\]     @GDamroll : @C\[@W%5d@C\]@w"
   s = fstr:format(gmcpval("stats.luck"),gmcpval("maxstats.maxluck"),gmcpval("stats.dr"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   s = ""
   table.insert(cstyles,s)

   fstr = "@GExp To Level : @C\[@W%5d@C\]       @GLevel   : @C\[@W%5d@C\]@w"
   s = fstr:format(gmcpval("status.tnl"),gmcpval("status.level"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GAlignment    : @C\[@W%5d@C\]       @GGold    : @C\[@Y%s@C\]@w"
   s = fstr:format(gmcpval("status.align"),commas(gmcpval("worth.gold")))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fstr = "@GQuest Points : @C\[@W%8d@C\]    @GTrivia  : @C\[@W%5d@C\]@w"
   s = fstr:format(gmcpval("worth.qp"),gmcpval("worth.tp"))
   table.insert(cstyles,s)
   if (#max_line < #(ColoursToStyles(s).text)) then
        max_line = ColoursToStyles(s).text
   end
   
   fighting = gmcpval("status.enemy")

   if fighting ~= "" and fighting ~= null then
      fstr = "@RFighting     : @C\[@W%s@C\] @R(@W%s%%@R)@w"
      s = fstr:format(gmcpval("status.enemy"),gmcpval("status.enemypct"))
      table.insert(cstyles,s)
      if (#max_line < #(ColoursToStyles(s).text)) then
         max_line = ColoursToStyles(s).text
      end
      title_gradient_col1   = 0x050555
      title_gradient_col2   = 0x3333cc
   else
      table.insert(cstyles,"")
      title_gradient_col1   = 0x050505
      title_gradient_col2   = 0x333333
   end
end -- BuildStatsPage


function DisplayStatsPage() 

   styles = cstyles

   WindowRectOp(win, 2, 0,0,0,0,background_colour) -- blank 
     
   -- title rectangle
   WindowGradient (win, 1, 0, width, TITLE_HEIGHT, title_gradient_col1, title_gradient_col2, 2)
   WindowLine(win, 0, TITLE_HEIGHT, width, TITLE_HEIGHT, 0xeeeeee, 0 + 0x0200, 1)
   WindowText (win, font_id_header, "Stats", width/2-20, (TITLE_HEIGHT/2)-(font_height/2), 0, 0, 0xeeeeee, utf8)
      
   if not page_built then
      txt = "Stats will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
      txt = "once you start playing."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee, utf8)
   else

      -- display each line   
      line = 0     
      for i, v in ipairs (styles) do
         line = i
         Display_ColourText_Line (i, v)
      end -- for           
   
      -- Only draw bars if we have data.
      if page_built and usebars == 1 then 

         local ypos = (line*line_height)+TOP_MARGIN+TITLE_HEIGHT
         local xpos = 20
         local bar_start = WindowTextWidth(win,font_id,"Health ")+xpos+10
         local bar_width = math.max(0, width-bar_start-30)
         local bar_height = line_height

         WindowLine(win,xpos,ypos,width-20,ypos,0xeeeeee,0,1)

         mw.colourtext(win,font_id,"@GHealth@w",xpos+10,ypos+7,0,0)
         gauge(win,"Health",tonumber(gmcpval("vitals.hp")),tonumber(gmcpval("maxstats.maxhp")),bar_start,ypos+7,bar_width,bar_height,0x0dcc49,0x000000,4,0x002200,0x000000,nil)

         ypos = ypos + line_height
         mw.colourtext(win,font_id,"@CMana @w",xpos+10,ypos+7,0,0)
         gauge(win,"Mana",tonumber(gmcpval("vitals.mana")),tonumber(gmcpval("maxstats.maxmana")),bar_start,ypos+7,bar_width,bar_height,0xcccc22,0x000000,4,0x004400,0x000000,nil) 

         ypos = ypos + line_height
         mw.colourtext(win,font_id,"@YMoves @w",xpos+10,ypos+7,0,0)
         gauge(win,"Moves",tonumber(gmcpval("vitals.moves")),tonumber(gmcpval("maxstats.maxmoves")),bar_start,ypos+7,bar_width,bar_height,0x00dddd,0x000000,4,0x004400,0x000000,nil) 

         ypos = ypos + line_height
         mw.colourtext(win,font_id,"@WTNL @w",xpos+10,ypos+7,0,0)
         gauge(win,"To Level",tonumber(gmcpval("status.tnl")),tonumber(gmcpval("base.perlevel")),bar_start,ypos+7,bar_width,bar_height,0xdfdfdf,0x000000,4,0x004400,0x000000,nil) 

         ypos = ypos + line_height

         fighting = gmcpval("status.enemy")

         if fighting ~= "" and fighting ~= null then
            enemypct = gmcpval("status.enemypct")
            if enemypct ~= "" then
               mw.colourtext(win,font_id,"@REnemy @w",xpos+10,ypos+7,0,0)
               gauge(win,"Enemy",enemypct,100,bar_start,ypos+7,bar_width,bar_height,0x2222bb,0x000000,4,0x000000,0x000000,nil) 
            end
         end
         ypos = ypos + line_height + 7
         WindowLine(win,xpos,ypos+TOP_MARGIN,width-20,ypos+TOP_MARGIN,0xeeeeee,0,1)
      end
   end

   -- draw edge frame.
   check (WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15))
   check (WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15))

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, ColourNameToRGB ("white"), 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, ColourNameToRGB ("dimgray"), 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, ColourNameToRGB ("white"), 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, ColourNameToRGB ("dimgray"), 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, ColourNameToRGB ("white"), 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, ColourNameToRGB ("dimgray"), 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, ColourNameToRGB ("white"), 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, ColourNameToRGB ("dimgray"), 0, 1)

   -- show it now (or refresh)
   WindowShow (win, true)
   Repaint()                 
end -- DisplayStatsPage

function RefreshPage()
   BuildStatsPage()
   DisplayStatsPage()
end

function Display_Styled_Line (line, styles)

  local left = LEFT_MARGIN
  local top = TITLE_HEIGHT + TOP_MARGIN + (line - 1) * font_height

  for _, v in ipairs (styles) do
    left = left + WindowText (win, font_id, v.text, left, top, 0, 0, ColourNameToRGB(v.textcolour))
  end -- for each style run                 

end -- Display_Styled_Line


function Display_ColourText_Line (line, msg)

  local left = LEFT_MARGIN
  local top = TITLE_HEIGHT + TOP_MARGIN + (line - 1) * font_height
  mw.colourtext(win,font_id,msg,left,top,0,0)

end -- Display_Styled_Line


-- right click menu
function right_click_menu ()

    menustring ="Change Font"

    if usebars == 1 then
        menustring = (menustring .."|Turn Bars Off")
    else
        menustring = (menustring.."|Turn Bars On")
    end --if

    menustring = (menustring .."|Reset Defaults")

    result = WindowMenu (win,
        WindowInfo (win, 14),  -- x position
        WindowInfo (win, 15),   -- y position
        menustring) -- content

    if result == "Turn Bars Off" then
       usebars = 0
       print("** Stat monitor menu bars turned off. **")
       RefreshPage()
    elseif result == "Turn Bars On" then
       usebars = 1
       print("** Stat monitor menu bars turned on. **")
       --RefreshPage()
    elseif result == "Change Font" then
       wanted_font = utils.fontpicker (FONT_NAME, FONT_SIZE) --font dialog
       if wanted_font then
          FONT_NAME = wanted_font.name
          FONT_SIZE = wanted_font.size
          SetVariable ("font_name", FONT_NAME)
          SetVariable ("font_size", FONT_SIZE)
          OnPluginInstall()
       end
    elseif result == "Reset Defaults" then
       font_name        = default_font_name
       font_size        = default_font_size
       height           = orig_height
       width            = default_width
       SetVariable("width",default_width)
       SetVariable("height",default_height)
       SetVariable("usebars",1)
       SetVariable("font_name",default_font_name)
       SetVariable("font_size",default_font_size)
       OnPluginInstall()
    end -- if

end -- right_click_menu


--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)

   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         page_built = false 
         return
      end

      if (text == "char.stats" or text == "char.maxstats" or text == "char.vitals" or text == "char.worth" or text == "char.status") then
         res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")

         luastmt = "gmcpdata = " .. gmcparg
         assert (loadstring (luastmt or "")) ()
         RefreshPage()
      end
   end
end


function debugp(source,hsid)
print("------------------------------------------------------------------------------")
print("Called FROM : " .. source .. "     HOTSPOT ID: " .. hsid)
print("startx:  " .. startx .. "   starty:  " .. starty)
print("posx:  " .. posx.. "   posy: " .. posy)
print("height: " .. height .. " width: " .. width)
print("------------------------------------------------------------------------------")
end


---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   --debugp("ResizeMoveCallback()","")

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)

   if ( (width + posx - startx) >= MIN_SIZE) then
      width = width + posx - startx
      startx = posx
   end

   if ( height + posy - starty >= MIN_SIZE) then
      height = height + posy - starty
      starty = posy
   end

   SetUpHotspotsAndDraw()
end

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
    --debugp("ResizeReleaseCallback()","")
    SetUpHotspotsAndDraw()
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   --debugp("mousedown",hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
      -- debugp("MouseDown")
   end

end

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
   --debugp("CancelMouseDown")
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id)
    --debugp("MouseUp",hotspot_id)
    if (hotspot_id == "textarea" and flags == 0x20) then
       -- build menu for current state
       right_click_menu()
    end
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()

  -- save window current location for next time  
  movewindow.save_state (win)
  
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("background_colour", background_colour)
  SetVariable ("title_colour", title_colour)  
  SetVariable ("width", width)
  SetVariable ("height", height)
  SetVariable ("usebars", usebars)
  SetVariable ("font_name", font_name)
  SetVariable ("font_size", font_size)

end -- OnPluginSaveState

function OnPluginDisable ()
    WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
    WindowShow (win, true)
    -- if we are connected when the plugin loads, it must have been reloaded whilst playing
    if IsConnected () then
        OnPluginConnect ()
    end -- if already connected
end -- OnPluginEnable


--=================================================================================
-- Called when plugin is first installed, including when Mush first starts.
-- This is the place to initialize stuff you need in the main plugin.
--=================================================================================
function OnPluginInstall() 

   --- Get a unique name for main window
   win = GetPluginID ()  -- get a unique name

--   local dir = GetInfo(66)
--   imgpath = dir .. "worlds\\plugins\\assets\\aardbg8.png"
--   WindowLoadImage(win, "wolf_logo", imgpath)

   --- Pull some state variables.
   background_colour = tonumber (GetVariable ("background_colour")) or background_colour
   title_colour      = tonumber (GetVariable ("title_colour")) or title_colour
   height            = tonumber (GetVariable ("height")) or default_height
   orig_height = height
   width             = tonumber (GetVariable ("width")) or default_width
   usebars           = tonumber (GetVariable ("usebars")) or HEALTH_BARS

   -- make window so I can grab the font info
   WindowCreate (win, 600, 600, 1, 1, 0, 0, background_colour) 

   font_id        = "statmon_font"
   font_id_bold   = "statmon_bold"
   font_id_header = "header_font"

   local fonts = utils.getfontfamilies ()

   if fonts ["Lucida Console"] then
      default_font_size = 9
      default_font_name = "Lucida Console"    -- the actual font
   elseif fonts["Dina"] then
      default_font_size = 10
      default_font_name = "Dina"
   else
      default_font_size = 9
      default_font_name = "Courier New"
   end -- if

   header_font_name = "Lucida Console"
   header_font_size = 9

   font_name        = GetVariable("font_name") or default_font_name
   font_size        = tonumber(GetVariable("font_size")) or default_font_size

   --- Load the fonts into the temp window.
   WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
   WindowFont (win, font_id_bold, font_name, font_size+1, true, false, false, false) -- bold font
   WindowFont (win, font_id_header, header_font_name,header_font_size,false,false,false,false) 

   --- Grab font size settings.
   font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
   font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
   line_height = font_height + 1

   --- install the window movement handler, get back the window position.
   windowinfo  = movewindow.install (win, 6, 2, true)

   --- Setup the window.
   SetUpHotspotsAndDraw(true)
   
end

--=================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================
function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
       check (WindowCreate (win, 
                 windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
                 width,     -- width
                 height,  -- height
                 windowinfo.window_mode,       -- auto-position: middle right
                 windowinfo.window_flags,  -- flags
                 background_colour) )                
       -- Add the drag handler so they can move the window around
       movewindow.add_drag_handler (win, 0, 0, 0, font_height*2 + TITLE_HEIGHT)
       -- Add right click handler
       WindowAddHotspot(win, "textarea", 0, TITLE_HEIGHT, width,height, "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 0, 0)
       -- Add handler for resizing
       WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 6, 0)
       WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
   else
       -- everything has already been made
       -- just move them back into place
       WindowResize(win, width, height, background_colour)
       WindowMoveHotspot(win, "textarea", 0, font_height*2 + TITLE_HEIGHT, width, height)
       WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end
    DisplayStatsPage()
end

--=================================================================================
--- Written by Bast (I think), based on the old formatStat on the plugin that
--- started it all, the 'telnet 102 statmon'.
--=================================================================================
function format_stat(statname, statcur, statother, colwidth, statlength, color)
    allstyle = {}
    
    style = {}    
    style.text = string.format( "%-" .. tostring(colwidth) .. "s", statname ) 
    style.textcolour = "lightseagreen"
    table.insert(allstyle, style)

    style = {}
    style.text = ' : '
    style.textcolour = "lightseagreen"
    --style.start = start
    table.insert(allstyle, style)

    style = {}
    style.text = string.format( "%" .. tostring(statlength) .. "s",  statcur)
    if color then
      style.textcolour = color
    else
      style.textcolour = 'white'
    end
    table.insert(allstyle, style)
    
    if statother then
      style = {}
      style.text = '/'
      style.textcolour = "lightseagreen"
      table.insert(allstyle, style)
      
      style = {}
      style.text = string.format( "%-" .. tostring(statlength) .. "s",  statother)
      style.textcolour = 'white'
      table.insert(allstyle, style)
    end

    return allstyle
end


-------------------------------------------------------------------------------
--- Calculate width of a line of styled text without drawing it.
-------------------------------------------------------------------------------
function styleWidth(style) 
    local s = ""

    for _,w in ipairs (style) do
       s = w.text .. s
    end

    return WindowTextWidth(win,font_id,s)
end -- styleWidth


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--- gmcp_helper.xml
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- Below here are the functions that could (probably should) be in a stand-alone gmcphelper.lua
-- module and included as necesssary. I duplicate them in plugin so that each GMCP plugins is
-- as standalone as possible.
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

---------------------------------------------------------------------------------------------------
-- FUNCTION:: get_gmcp
--   Reverse of parse_gmcp - takes a value like "room.info.exits.n" and checks each level for
--   the next table and then for the actual value.
---------------------------------------------------------------------------------------------------
function get_gmcp(fieldname, parent) 

   assert (fieldname, "nil fieldname passed to get_gmcp")
   assert (parent, "nil parent passed to get_gmcp")
   assert (type (parent) == "table", "non-table parent value passed to get_gmcp")

   local lastval = get_last_tag(fieldname)

   for item in string.gmatch(fieldname,"%a+") do
      if parent[item] ~= nil then

         if item == lastval then return parent[item] end

         if type(parent[item])  == "table" then
            parent = parent[item]
         else
            return parent[item]
         end
      else
         return "" -- if we asked for something valid, shouldn't get this.
      end
   end -- for item

   return "" -- shouldn't reach here either if we asked for something valid.
end -- function get_gmcp

---------------------------------------------------------------------------------------------------
-- FUNCTION:: get_last_tag
--   Parses inbound string to pull the last of "char.vitals.str" or "room". First is "str", 
--   second is just "room". Used to check if we're at the last level when accessing gmcpdata
--   by a keyword.
---------------------------------------------------------------------------------------------------
function get_last_tag(instr) 

   return string.match(instr,"^.*%.(%a+)$") or instr

end -- get_last_tag

---------------------------------------------------------------------------------------------------
-- FUNCTION:: gmcpval
--   Return an item from the table. Just a wrapper to serialize a table or return a uniqie
--   value that won't error if a value that doesn't exist is requested.
---------------------------------------------------------------------------------------------------
function gmcpval(fieldname) 
   return gmcpsection(fieldname,true)
end

---------------------------------------------------------------------------------------------------
-- FUNCTION:: gmcpitem
--   Version of gmcpval that should never return a table. Considered an error if it does.
---------------------------------------------------------------------------------------------------
function gmcpitem(fieldname) 
   return gmcpsection(fieldname,false)
end

---------------------------------------------------------------------------------------------------
-- FUNCTION:: gmcpsection
--   Return an item from the table, may be either a nested table serialized or a single
--   item - depends on the flag. Called by gmcpval (table ok) and gmcpitem (not ok).
---------------------------------------------------------------------------------------------------
function gmcpsection(fieldname,nesting) 
   local outval = get_gmcp(fieldname,gmcpdata)
 
   if (type(outval) == "table") then 
      assert(nesting,"nested table value requested from GMCP. Should be single element.")
      return serialize.save_simple(outval) 
   end

   if type (outval) == "string" then
      return outval 
   else
      return tostring (outval)
   end
end

function RequestData() 
   Send_GMCP_Packet("request char")
end

-- Added only so I can 'sendgmcp request char' to refresh char stats.
local IAC, SB, SE, DO = 0xFF, 0xFA, 0xF0, 0xFD
local GMCP      = 201


---------------------------------------------------------------------------------------------------
-- Helper function to send GMCP data.
---------------------------------------------------------------------------------------------------
function Send_GMCP_Packet (what)
   assert (what, "Send_GMCP_Packet passed a nil message.")

   SendPkt (string.char (IAC, SB, GMCP) .. 
           (string.gsub (what, "\255", "\255\255")) ..  -- IAC becomes IAC IAC
            string.char (IAC, SE))
end -- Send_GMCP_Packet

]]>


</script>
</muclient>
