<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, August 29, 2010, 3:35 PM -->
<!-- MuClient version 4.56 -->

<!-- Plugin "aard_mapper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Aardwolf_Ascii_Mapper"
   author="Multiple"
   id="3f498d929793c12cb70fb59e"
   language="Lua"
   purpose="Aardwolf ASCII mapper"
   date_written="2010-08-29 15:35:02"
   requires="4.56"
   version="1.0"
   save_state="y"
   >

<description trim="y">

Aardwolf ASCII mapper.

Captures the Aardwolf map and roomname into a draggable/resizeable mini-window.

Combination of work from many sources including Nick Gammon, Bast, Fiendish,
Blainer and others. All cobbled together by Lasher. And then recobbled by Fiendish again.

Feel free to use this for any purpose on any MUD, but I'd appreciate an email if you improve
something -- wolf@aardwolf.com

</description>

</plugin>


<!--  Triggers  -->

<triggers>

  <trigger
   enabled="y"
   match="<MAPSTART>"
   script="map_redirect"
   omit_from_output="y"
   name="map_start"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="n"
   match="*"
   script="map_redirect"
   name="multi_line_map"
   omit_from_output="y"
   sequence="10"
  >
  </trigger>

  <trigger
   enabled="y"
   match="<MAPEND>"
   script="map_redirect"
   omit_from_output="y"
   name="map_end"
   sequence="5"
  >
  </trigger>

  <trigger
   enabled="y"
   match="You open *."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>
  
  <trigger
   enabled="y"
   match="You close *."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>

  <trigger
   enabled="y"
   match="* opens*."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>
  
  <trigger
   enabled="y"
   match="* closes*."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>
  
  <trigger
   enabled="y"
   match="You can now sense anger in your immediate area."
   sequence="100"
   send_to="12"
  >
  <send>SendNoEcho ("map")</send>
  </trigger>
  
</triggers>

<script>
<![CDATA[

require "movewindow"
require "mw"

background_colour     = 0x000000
title_colour          = 0x292929
border_color          = 0xdddddd
title_gradient_col1   = 0x151515
title_gradient_col2   = 0x333333
default_width         = 250
default_height        = 300
map_lines = {}
coord_data= {}
show_coords = 0


--title_colour          = 0xf92929
RESIZE_TAG_SIZE = 10
MIN_SIZE        = 100
TITLE_HEIGHT    = 11

-- Variables not saved.
startx           = ""  
starty           = ""
posx             = "" 
posy             = ""
hotspot_id       = ""
page_built       = false

continents = { [0]="Mesolar", [1]="Southern Ocean", [2]="Gelidus", [3]="Abend", [4]="Alagh", [5]="Uncharted Ocean", [6]="Vidblain" }

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID(), 20) .. "telnet_options.lua")

function map_redirect (name, line, wildcards, styles)
	EnableTrigger ("multi_line_map", true)  -- capture subsequent lines
	if name == "map_start" then   --- Setup the window.
		map_lines = {} --reset ready for new map
	elseif name == "map_end" then
	   EnableTrigger ("multi_line_map", false)  -- no more lines to go
       page_built = true
	   DisplayMapPage () --end of map from MUD, display the window
	else
		table.insert (map_lines, styles)
	end
end -- function map_redirect

function SetUpHotspotsAndDraw(firstTime)
   if (firstTime == true) then
       check (WindowCreate (win, 
             windowinfo.window_left, windowinfo.window_top,   -- left, top (auto-positions)
             width,     -- width
             height,  -- height
             windowinfo.window_mode,       -- auto-position: middle right
             windowinfo.window_flags,  -- flags
             background_colour) )
       -- Add the drag handler so they can move the window around
       movewindow.add_drag_handler (GetPluginID(), 0, 0, 0, 0, nil, my_layer_string.."_")
       -- Add legend-popup handler
       WindowAddHotspot(win, "legend", 1, font_height*2+TITLE_HEIGHT+1, 3*font_width+1,font_height*2+TITLE_HEIGHT+font_height+5 , "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 12, 0)

       -- Add handler for resizing
       WindowAddHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
       WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
   else
       -- everything has already been made
       -- just move them back into place
       WindowResize(win, width, height, background_colour)
       WindowMoveHotspot(win, "legend", 5, height-font_height-2, 3*font_width, height)
       WindowMoveHotspot(win, "resize", width-RESIZE_TAG_SIZE, height-RESIZE_TAG_SIZE, width, height)
   end

   DisplayMapPage()
end

--=================================================================================
-- Called by OnPluginInstall, but also by redraw routine to refresh the screen
-- and (if the first time) add the resizer tag, otherwise move the resizer relative
-- to the main window.
--=================================================================================

function DisplayMapPage()
    
   styles = { }
   
   WindowRectOp(win, 2, 2,2,-2,-2,background_colour) -- blank

   -- show the widget for the legend popup
   WindowRectOp(win, 2, 1, font_height*2+TITLE_HEIGHT+1, 3*font_width+1,font_height*2+TITLE_HEIGHT+font_height+5,0x303030,0x0000ff) -- fill
   WindowRectOp(win, 1, 1, font_height*2+TITLE_HEIGHT+1, 3*font_width+1,font_height*2+TITLE_HEIGHT+font_height+5,0x777777,0x0000ff) -- border
   WindowText (win, font_id, "?", font_width+1, font_height*2+TITLE_HEIGHT+1, 0, 0, 0xffffff)
   
   -- title rectangle
   WindowGradient (win, 2, 2, -2, font_height*2+TITLE_HEIGHT, title_gradient_col1, title_gradient_col2, 2)
   WindowLine(win,0,font_height*2 + TITLE_HEIGHT,width,font_height*2+TITLE_HEIGHT,0xeeeeee,0,1)

   if not page_built then
      txt = "Map will appear here"
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2, 0, 0, 0xeeeeee, utf8)
      txt = "once you start playing."
      txtlen = WindowTextWidth(win,font_id,txt)
      WindowText (win, font_id, txt, (width-txtlen)/2, height/2+font_height, 0, 0, 0xeeeeee, utf8)
   else        
      -- display each line        
      imax = 0
      for i, v in ipairs (map_lines) do
         Display_Line (i, v)
         imax = i
      end -- for
                
      -- tack on coordinates after the map displays
      if (show_coords == 1 and coords ~= nil) then
         Display_Line (#map_lines+1, coords)
      end
   end

   -- draw edge frame.
   WindowRectOp (win, 1, 0, 0, 0, 0, border_color, 15)
   WindowRectOp (win, 1, 1, 1, -1, -1, 0x777777, 15)

   -- draw the resize widget bottom right corner.
   WindowLine(win, width-3, height-2, width-2, height-3, 0xffffff, 0, 2)
   WindowLine(win, width-4, height-2, width-2, height-4, 0x696969, 0, 1)
   WindowLine(win, width-6, height-2, width-2, height-6, 0xffffff, 0, 2)
   WindowLine(win, width-7, height-2, width-2, height-7, 0x696969, 0, 1)
   WindowLine(win, width-9, height-2, width-2, height-9, 0xffffff, 0, 2)
   WindowLine(win, width-10, height-2, width-2, height-10, 0x696969, 0, 1)
   WindowLine(win, width-12, height-2, width-2, height-12, 0xffffff, 0, 2)
   WindowLine(win, width-13, height-2, width-2, height-13, 0x696969, 0, 1)

   -- show it now (or refresh)
   WindowShow (win, true)
   --Redraw()
   BroadcastPlugin (999, "repaint")
                 
end -- Display_Map

function process_coords ()
  if (coord_data.id == "-1") then
     coords = nil
     return
  end

  local tstyle = {}
  local style = {}
  style.text = "["
  style.len = #style.text
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)

  style = {}
  style.text = " Coords: "
  style.len = #style.text
  style.textcolour = 0xF0FFFF
  style.style = 0
  table.insert (tstyle, style)

  style = {}
  tempval = tonumber(coord_data.id)

  style.text = continents[tempval] .. " " .. coord_data.x .. " " .. coord_data.y
  style.len = #style.text
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)

  style = {}
  style.text = "]"
  style.len = #style.text
  style.textcolour = 0x00D600
  style.style = 0
  table.insert (tstyle, style)  
  coords = tstyle
end


function Display_Line (line, styles)
    local id = font_id

    -- first 2 lines in bold
    if line < 3 then
      id = font_id_bold
    end

    local left = 10
    local top =  (line - 1) * font_height + 5

    for _, v in ipairs (styles) do
        left = left + WindowText (win, id, v.text,
                               left, top, 0, 0, v.textcolour)
    end -- for each style run                 
end -- Display_Line

-- right click menu
function right_click_menu ()

    menustring ="Change Font"

    if show_coords == 1 then
        menustring = (menustring .."|Hide Coordinates")
    else
        menustring = (menustring.."|Show Coordinates")
    end

    menustring = (menustring .."|-|Bring To Front|-|Reset Defaults")

    result = WindowMenu (win,
        WindowInfo (win, 14),  -- x position
        WindowInfo (win, 15),   -- y position
        menustring) -- content

    if result == "Hide Coordinates" then
       show_coords = 0
       print("** Map coordinates off.")
       coords = nil
       SendNoEcho ("map")
    elseif result == "Show Coordinates" then
       show_coords = 1
       coords = nil
       print("** Map coordinates on.")
       SendNoEcho ("map")
       Send_GMCP_Packet("request room")
    elseif result == "Change Font" then
       wanted_font = utils.fontpicker (font_name, font_size) --font dialog
       if wanted_font then
          font_name = wanted_font.name
          font_size = wanted_font.size
          -- save and reload
          OnPluginSaveState()
          OnPluginInstall()
       end
    elseif result == "Bring To Front" then
        rc, max_layer = CallPlugin("462b665ecb569efbf261422f","maxLayer")
        if (my_layer_number ~= max_layer) then
           BroadcastPlugin(998, tostring(my_layer_number))
           my_layer_number = max_layer
           OnPluginSaveState()
           OnPluginInstall()
        end
    elseif result == "Reset Defaults" then
       font_name        = default_font_name
       font_size        = default_font_size
       height           = default_height
       width            = default_width
       show_coords      = 0
       -- save and reload
       OnPluginSaveState()
       OnPluginInstall()
    end -- if

end -- right_click_menu


--=================================================================================
-- Called when plugin receives telnet data - main entry point for actually running
-- the plugin.
--=================================================================================
function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == 'reload') then
         -- invalidate current data
         page_built = false 
         return
      end

      if (text == "room.info") then
         if (show_coords == 1) then
             res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info.coord")         
             luastmt = "gmcpdata = " .. gmcparg
             assert (loadstring (luastmt or "")) ()
             coord_data = gmcpdata
             process_coords()
         end
         if page_built == false then
            SendNoEcho("map")
         end
         DisplayMapPage()
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      first_check = false
      OnPluginListChanged()
   elseif (id ~= GetPluginID()) then -- just in case a plugin receives its own broadcasts
      if (msg == 995 and text == "lock") then
         layer_lock = 1
      elseif (msg == 995 and text == "unlock") then
         layer_lock = 0
      elseif (layer_lock == 0 and msg == 998 and tonumber(text) < my_layer_number) then
         my_layer_number = my_layer_number - 1
         OnPluginSaveState()
         OnPluginInstall()
      end
   end
end


function debugp(source,hsid)
print("------------------------------------------------------------------------------")
print("Called FROM : " .. source .. "     HOTSPOT ID: " .. hsid)
print("startx:  " .. startx .. "   starty:  " .. starty)
print("posx:  " .. posx.. "   posy: " .. posy)
print("height: " .. height .. " width: " .. width)
print("------------------------------------------------------------------------------")
end


---------------------------------------------------------------------------------
-- Called as the window is dragged around. This function and those below are
-- only 'handlers' because they are set in WindowAddHotSpot
---------------------------------------------------------------------------------
function ResizeMoveCallback()
   --debugp("ResizeMoveCallback()","")

   posx, posy = WindowInfo (win, 17), WindowInfo (win, 18)
   width = width + posx - startx
   startx = posx
   if (width < MIN_SIZE) then
      width = MIN_SIZE
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end 

   height = height + posy - starty
   starty = posy
   if (height < MIN_SIZE) then
      height = MIN_SIZE
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   SetUpHotspotsAndDraw(false)
end

---------------------------------------------------------------------------------
-- Called after the resize widget is released.
---------------------------------------------------------------------------------
function ResizeReleaseCallback()
    --debugp("ResizeReleaseCallback()","")
    SetUpHotspotsAndDraw(true)
end

---------------------------------------------------------------------------------
-- Called when mouse button is pressed on hotspot.
---------------------------------------------------------------------------------
function MouseDown(flags, hotspot_id)
   -- debugp("mousedown",hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
      -- debugp("MouseDown")
   end
end

function MouseOver (flags, hotspotid)

   if (hotspotid ~= "legend") then return end

   -- work out coordinates
   local left =  WindowInfo (win, 10)
   local top =  WindowInfo (win, 11)

   -- what to say - one line per table entry, with imbedded colour codes  
  info = {"@WMap Legend:@w",
"",     
"  @M#@w  - You                      --- - North/south wall",
"  @R*@w  - Other players             |  - East/west wall",
"  @Y!@w  - Mobiles                   +  - Door (closed)",
"  @C!@w  - Pet/other charmed mob     @B+@w  - Door (locked)",
"  @R!@w  - Angry mob (with Sense     >  - Up exit",
"       Anger cast)               @y>@w  - Up exit (closed)",
"  @G!@w  - Unkillable Mob            <  - Down exit",
"  @G$@w  - Shopkeeper                @y<@w  - Down exit (closed)",
"",
" @C[@W?@C]@w - Area exit                 @R#@w  - PK-flagged room",
" @G[@W?@G]@w - Clan public hall exit     @RD@w  - Donation room",
"",
"@WTerrains:@w",
"",     
" [ ]   Inside                   . .   City",
" @g, `@w   Field                    @G; ;@w   Hills",
" @y/ \\@w   Mountain                 @B~ ~@w   Water",
" @B~ ~@w   Waternoswim              @c. .@w   Air",
" @y~ ~@w   Desert                   @Y% %@w   Quicksand",
" @b~ ~@w   Underwater               @C~ ~@w   Ice",
" @B. .@w   Underground              - -   East/West road",
" . .   North/South road         @C~ ~@w   River",
" @R/@w     Volcano                  @b% %@w   Cave",
" # #   Dungeon                  @g( *@w   Forest",
}
                
  heading = ""
  
  if windowinfo.window_left < 300 then
     align_left = true
     align_right = false
     left = windowinfo.window_left + width + 10
     top = windowinfo.window_top + 15
    
  else
     align_right = true
     align_left = false
  end

  align_bottom = false
  capitalize = true

  -- show it  
  mw.popup (infowin,           -- window name to use
            heading_font_id,   -- font to use for the heading
            popup_font_id,           -- font to use for each line
            heading,           -- heading text
            info,              -- table of lines to show (with colour codes)
            left, top,         -- where to put it
            0x008800,     -- colour for round rectangle line
            background_colour, -- colour for background
            capitalize,        -- if true, force the first letter to upper case
            align_right,       -- if true, align right side on "Left" parameter
            align_bottom)      -- if true, align bottom side on "Top" parameter
            
end -- mouseover

function CancelMouseOver (flags, hotspotid)
  WindowShow (infowin, false)
end -- cancelmouseover

---------------------------------------------------------------------------------
-- Called when mouse moved away from hotspot. Doesn't really apply for draggables.
---------------------------------------------------------------------------------
function CancelMouseDown(flags, hotspot_id)
end

---------------------------------------------------------------------------------
-- Called when mouse button released on hotspot.
---------------------------------------------------------------------------------
function MouseUp(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
       right_click_menu()
    end
    return true
end

function LeftClickOnly(flags, hotspot_id, win)
    if bit.band (flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
        return true
    end
    return false
end

function OnPluginConnect()
   TelnetOptionOn(TELOPT_MAP)
   TelnetOptionOff(TELOPT_SHORTMAP)
   TelnetOptionOn(TELOPT_ROOM_NAMES)
   TelnetOptionOn(TELOPT_EXIT_NAMES)
   TelnetOptionOn(TELOPT_AUTOMAP) -- does this do anything?
end

---------------------------------------------------------------------------------
-- Called when plugin is saved - store our variables for next time.
---------------------------------------------------------------------------------
function OnPluginSaveState ()

  -- save window current location for next time  
  movewindow.save_state (GetPluginID())

  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("background_colour", background_colour)
  SetVariable ("title_colour", title_colour)  
  SetVariable ("width", width)
  SetVariable ("height", height)
  SetVariable ("showcoords", show_coords)
  SetVariable ("font_name", font_name)
  SetVariable ("font_size", font_size)
  SetVariable ("my_layer_number", my_layer_number)

end -- OnPluginSaveState

function OnPluginClose ()
   OnPluginDisable()
end

function OnPluginDisable ()
    WindowShow( win, false )
end --  OnPluginDisable

function OnPluginEnable ()
    WindowShow (win, true)
end -- OnPluginEnable

layer_lock = 0
first_check = false
my_layer_string = ""
my_layer_number = tonumber(GetVariable("my_layer_number"))
win = GetPluginID()
require "checkplugin"
function OnPluginListChanged ()
  if not first_check then
      do_plugin_check_now ("462b665ecb569efbf261422f", "aard_miniwindow_z_order_monitor")    -- check we have z order plugin
      rc, my_layer_number, my_layer_string = CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", GetPluginID(), my_layer_number)
      first_check = true
      OnPluginInstall() -- run install again now that the z order plugin is loaded
  end
end -- OnPluginListChanged

function OnPluginInstall() 
   if first_check then
       -- don't make z order calls until we've loaded the z order plugin
       rc, my_layer_string = CallPlugin("462b665ecb569efbf261422f","layerString",my_layer_number)
       local oldwin = win
       win = my_layer_string.."_"..GetPluginID()  -- get a unique name
       if oldwin ~= win then
          CallPlugin("462b665ecb569efbf261422f","cycleOutWindow",oldwin)
       end
   
       --- Pull some state variables.
       background_colour = tonumber (GetVariable ("background_colour")) or background_colour
       title_colour      = tonumber (GetVariable ("title_colour")) or title_colour
       height            = tonumber (GetVariable ("height")) or default_height
       width             = tonumber (GetVariable ("width")) or default_width
       show_coords       = tonumber (GetVariable ("showcoords")) or show_coords

       -- make window so I can grab the font info
       WindowCreate (win, width, height, 1, 1, 0, 0, background_colour) 

       font_id        = "mapper_font"
       font_id_bold   = "mapper_bold"

       local fonts = utils.getfontfamilies ()

       -- if not there already, add it
       if not fonts.Dina then
         AddFont (GetInfo (66) .. "\\Dina.fon")
         fonts = utils.getfontfamilies ()
       end -- if Dina not installed

       if fonts["Courier New"] then
          default_font_size = 9
          default_font_name = "Courier New"
       elseif fonts ["Dina"] then
          default_font_size = 8
          default_font_name = "Dina"    -- the actual font
       else
          default_font_size = 9
          default_font_name = "Lucida Console"
       end -- if

       font_name        = GetVariable("font_name") or default_font_name
       font_size        = tonumber(GetVariable("font_size")) or default_font_size

       --- Load the fonts into the temp window.
       WindowFont (win, font_id, font_name, font_size, false, false, false, false) -- normal font
       WindowFont (win, font_id_bold, font_name, font_size+1, false, false, false, false) -- bold font

       --- Grab font size settings.
       font_height = WindowFontInfo (win, font_id, 1) -  WindowFontInfo (win, font_id, 4) + 1 -- height
       font_width  = WindowFontInfo (win, font_id, 6)  -- avg width
       line_height = font_height + 1

       --- install the window movement handler, get back the window position.
       windowinfo  = movewindow.install (GetPluginID(), miniwin.pos_top_right, 0, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly}, my_layer_string.."_")

       -- Draw the initial map window
       SetUpHotspotsAndDraw(true)

       -- Info (Legend) window
      
       -- our window frame/background colours
       border_colour = ColourNameToRGB "dimgray"
      
       -- a unique ID
       infowin = "~~~~~~"..GetPluginID () .. ":info" -- name hack to make the popup go on top of everything

       -- font IDs
       popup_font_id = "popup_font"  
       heading_font_id = "popup_heading_font"  
     
       -- load fonts - mouseover window
       WindowCreate (infowin, 0, 0, 1, 1, 0, 0, 0)   -- make 1-pixel wide window
      
       -- install the fonts  (49 is modern / fixed pitch)
       WindowFont (infowin, popup_font_id, font_name, font_size, false, false, false, false, 0, 49) 
       WindowFont (infowin, heading_font_id, font_name, font_size + 2, false, false, false, false, 0, 49)
       
       -- update on reload
       if IsConnected() then
            OnPluginConnect()
       end    
   end
end

-- Added only so I can 'sendgmcp request char' to refresh char stats.
local IAC, SB, SE, DO = 0xFF, 0xFA, 0xF0, 0xFD
local GMCP      = 201


---------------------------------------------------------------------------------------------------
-- Helper function to send GMCP data.
---------------------------------------------------------------------------------------------------
function Send_GMCP_Packet (what)
   assert (what, "Send_GMCP_Packet passed a nil message.")

   SendPkt (string.char (IAC, SB, GMCP) .. 
           (string.gsub (what, "\255", "\255\255")) ..  -- IAC becomes IAC IAC
            string.char (IAC, SE))
end -- Send_GMCP_Packet


]]>


</script>

</muclient>
