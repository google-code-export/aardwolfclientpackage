<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- Bits of this plugin were borrowed and remixed from the MUSHclient community. http://www.gammon.com.au/forum/?id=9385 -->
<!-- Modifications for Aardwolf and extra awesome sauce added by Fiendish -->

<muclient>
    <plugin
    name="Chat_Capture_Miniwindow"
    author="Fiendish"
    id="b555825a4a5700c35fa80780"
    language="Lua"
    purpose="Move chats to a miniwindow"
    date_written="2010-04-04"
    requires="4.40"
    version="1.0"
    save_state="y"
    >

</plugin>

<triggers>
    <trigger
    enabled="y"
    match="^{say}(?<msg>.*)"
    regexp="y"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    match="^{chan ch=(?<channel>\w+)}(?<msg>.*)"
    regexp="y"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    match="^{tell}(?<msg>.*)"
    script="chats"
    omit_from_output="y"
    regexp="y"
    sequence="100"
    ></trigger>
</triggers>

<aliases>
    <alias
    script="chat_echo"
    match="^chats echo( on| off)?$"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
    ></alias>
</aliases>

<script>
<![CDATA[

require "movewindow"  -- load the movewindow.lua module
require "copytable"

WINDOW_COLUMNS = 80
WINDOW_LINES = 10
MAX_LINES = 10000 -- how many lines to store
FONT_NAME = "Dina"
FONT_SIZE = 8
SCROLL_BAR_WIDTH = 15
LEFT_MARGIN = 5
RIGHT_MARGIN = 5

date_format = "[%d %b %H:%M:%S] "        -- [30 Aug 13:29:49]   date and time 24 hour
--date_format = "[%d %b %I:%M:%S%p] "  -- [30 Aug 01:20:12PM]     date and time 12 hour
--date_format = "[%H:%M:%S] "          -- [13:29:08]          time 24 hour
--date_format = "[%X] "                  -- [1:22:06 PM]            time 12 hour

echo = true

-- colours
WINDOW_BACKGROUND_COLOUR = ColourNameToRGB ("black")
WINDOW_TEXT_COLOUR = ColourNameToRGB ("white")
SCROLL_BACKGROUND_COLOUR = ColourNameToRGB ("#E8E8E8")
SCROLL_BAR_COLOUR = ColourNameToRGB ("#111111")
SCROLL_DETAIL_COLOUR = ColourNameToRGB ("black")
WINDOW_BORDER_COLOUR = ColourNameToRGB ("blue")

-- offset of text from edge
TEXT_INSET = 5

-- where to store the chat line
lines = {}  -- table of recent chat lines
rawlines = {}

lineStart = ""
lineEnd = ""

-- pull in telnet option handling
dofile (GetPluginInfo (GetPluginID (), 20) .. "telnet_options.lua")
SBWin = GetPluginID()
SBWinResizer = SBWin.."resize"
WINDOW_WIDTH = ""
WINDOW_HEIGHT = ""
font_height = ""
line_height = ""
windowinfo = ""
startx = ""
starty = ""

function InstallResizeTag()
    movewindow.add_drag_handler (SBWinResizer, 0, 0, 0, 0)
    WindowAddHotspot(SBWinResizer, "resize", 0, 0, 0, 0, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "Drag to resize", 6, 0)
    WindowDragHandler(SBWinResizer, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
end

function ResizeMoveCallback()
    posx, posy = WindowInfo (SBWinResizer, 17), WindowInfo (SBWinResizer, 18)
    WINDOW_WIDTH = math.max(WindowTextWidth(SBWin, "font"..SBWin, "WWWCOMMUNICATION")+2*SCROLL_BAR_WIDTH,WINDOW_WIDTH+posx-startx)
    WINDOW_HEIGHT = math.max(line_height*5+1,WINDOW_HEIGHT+posy-starty)
    WINDOW_LINES = math.ceil((WINDOW_HEIGHT-line_height)/line_height)
    WINDOW_COLUMNS = math.ceil((WINDOW_WIDTH-SCROLL_BAR_WIDTH)/font_width)
    init(false)
    startx = posx
    starty = posy
end

function ResizeReleaseCallback()
    WINDOW_HEIGHT = (line_height*(WINDOW_LINES))+2
    init(true)
end

function OnPluginInstall()
   -- install the window movement handler, get back the window position
    resizerinfo = movewindow.install (SBWinResizer, 6, 6, true)
    windowinfo = movewindow.install (SBWin, 6, 2, true, {SBWinResizer})
    
    -- Dummy window to get font characteristics
    check (WindowCreate (SBWin, windowinfo.window_left, windowinfo.window_top, 1, 1, windowinfo.window_mode, windowinfo.window_flags, WINDOW_BACKGROUND_COLOUR) )
    check (WindowFont(SBWin, "font"..SBWin, FONT_NAME, FONT_SIZE))
    font_height = WindowFontInfo (SBWin, "font"..SBWin, 1) -  WindowFontInfo (SBWin, "font"..SBWin, 4) + 1
    line_height = font_height+1
    font_width = WindowTextWidth (SBWin, "font"..SBWin, "W")

    -- window size in pixels
    WINDOW_WIDTH = (font_width*WINDOW_COLUMNS)+SCROLL_BAR_WIDTH
    WINDOW_HEIGHT = (line_height*WINDOW_LINES)+line_height
    init(true)
    OnPluginEnable ()  -- do initialization stuff
end

function init(firstTime)
    WindowCreate(SBWin, windowinfo.window_left, windowinfo.window_top, WINDOW_WIDTH, WINDOW_HEIGHT, windowinfo.window_mode, windowinfo.window_flags, WINDOW_BACKGROUND_COLOUR)
    WindowShow(SBWin, true)
    
    -- add the drag handler so they can move the window around
    movewindow.add_drag_handler (SBWin, 0, 0, 0, line_height)

    -- scroll bar
    WindowAddHotspot(SBWin, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, 0, 20, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "Scroll up", 1, 0)
    WindowAddHotspot(SBWin, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-20, 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "Scroll down", 1, 0)

    -- put the resizer in place
    if (firstTime == true) then
        WindowCreate(SBWinResizer, windowinfo.window_left+WINDOW_WIDTH-SCROLL_BAR_WIDTH, windowinfo.window_top+WINDOW_HEIGHT-SCROLL_BAR_WIDTH, SCROLL_BAR_WIDTH, SCROLL_BAR_WIDTH, 0, 6, ColourNameToRGB("pink"))
        WindowShow(SBWinResizer, true)
        InstallResizeTag(SBWinResizer, SCROLL_BAR_WIDTH)
    else
        WindowPosition(SBWinResizer, windowinfo.window_left+WINDOW_WIDTH-SCROLL_BAR_WIDTH, windowinfo.window_top+WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 0, 6)
    end

    lines = {}
    for _,styles in ipairs(rawlines) do
        fillBuffer(styles)
    end
    lineStart = math.max(1, #lines-WINDOW_LINES+2)
    lineEnd = math.max(1, #lines)
    refresh()
end

function OnPluginConnect ()
    -- first time after connect, get tags right
    TelnetOptionOn (TELOPT_CHANNELS)
    TelnetOptionOn (TELOPT_TELLS)
    TelnetOptionOn (TELOPT_SAYS)
end -- function OnPluginConnect

function OnPluginClose ()
    -- if enabled
    if GetPluginInfo (GetPluginID (), 17) then
        OnPluginDisable()
    end -- if enabled
end -- OnPluginClose

function OnPluginEnable ()
    WindowShow (SBWin, true)
    WindowShow (SBWinResizer, true)
    -- if we are connected when the plugin loads, it must have been reloaded whilst playing
    if IsConnected () then
        OnPluginConnect ()
    end -- if already connected
end -- OnPluginEnable

function OnPluginSaveState ()
    -- save window current location for next time  
    SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
    movewindow.save_state (SBWin)
    movewindow.save_state (SBWinResizer)
end -- function OnPluginSaveState

function OnPluginDisable ()
    TelnetOptionOff (TELOPT_CHANNELS)
    TelnetOptionOff (TELOPT_TELLS)
    TelnetOptionOff (TELOPT_SAYS)
    WindowShow( SBWin, false )
    WindowShow( SBWinResizer, false)
end -- function OnPluginSaveState

-- display one line
function Display_Line (line, styles)
    local left = TEXT_INSET
    if (styles) then
        for _, v in ipairs (styles) do
            left = left + WindowText (SBWin, "font"..SBWin, v.text, left, SPACING, 0, 0, v.textcolour)
        end -- for each style run
    end
end -- Display_Line

-- display all visible lines
function writeLines()
    SPACING = line_height
    for count = lineStart, lineEnd do
        Display_Line( count, lines[count] )
        SPACING = SPACING + line_height
    end
end

-- clear and redraw
function refresh()
    WindowRectOp(SBWin, 2, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_BACKGROUND_COLOUR)
    drawStuff()
end

function drawStuff()
    -- draw drag bar rectangle
    -- show border so we can see what we are doing
    WindowRectOp (SBWin, 1, 0, 0, 0, 0, WINDOW_BORDER_COLOUR)
    -- top half
    WindowGradient (SBWin, 0, 0, 0, line_height/2, 0x000000, ColourNameToRGB("darkblue"), 2)
    -- bottom half
    WindowGradient (SBWin, 0, line_height/2, 0, line_height, ColourNameToRGB("darkblue"), 0x000000, 2)

    -- Title
    WindowText(SBWin, "font"..SBWin, "COMMUNICATION", ((WINDOW_WIDTH-SCROLL_BAR_WIDTH)-(7.5*line_height))/2, -1, WINDOW_WIDTH-(RIGHT_MARGIN+SCROLL_BAR_WIDTH), line_height, ColourNameToRGB("white"), false)
    
    -- Scrollbar
    WindowRectOp(SBWin, 2, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0, WINDOW_WIDTH, WINDOW_HEIGHT, SCROLL_BACKGROUND_COLOUR)
    WindowRectOp (SBWin, 1, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, SCROLL_BAR_WIDTH, WINDOW_WIDTH-1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), SCROLL_DETAIL_COLOUR)
    WindowLine (SBWin, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 3, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+1, 9, ColourNameToRGB ("black"), 0, 1)
    WindowLine (SBWin, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, 3, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+13, 9, ColourNameToRGB ("black"), 0, 1)
    WindowLine (SBWin, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-3, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+1, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-9, ColourNameToRGB ("black"), 0, 1)
    WindowLine (SBWin, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-3, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+13, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-9, ColourNameToRGB ("black"), 0, 1)
    totalSteps = #lines
    if (totalSteps <= WINDOW_LINES-1) then totalSteps = 1 end
    stepNum = lineStart
    SCROLL_BAR_HEIGHT = (WINDOW_HEIGHT-(3*SCROLL_BAR_WIDTH))
    barPos = SCROLL_BAR_WIDTH + ((SCROLL_BAR_HEIGHT/totalSteps) * (stepNum-1))
    barSize = (SCROLL_BAR_HEIGHT/totalSteps) * (WINDOW_LINES-1)
    WindowRectOp(SBWin, 5, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, math.min(barPos+barSize, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH)), 5, 15 + 0x800)
    
    -- resize tag    
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+1, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+1, ColourNameToRGB ("white"), 0, 2)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+2, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+2, ColourNameToRGB ("dimgray"), 0, 1)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+4, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+4, ColourNameToRGB ("white"), 0, 2)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+5, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+5, ColourNameToRGB ("dimgray"), 0, 1)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+7, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+7, ColourNameToRGB ("white"), 0, 2)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+8, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+8, ColourNameToRGB ("dimgray"), 0, 1)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+10, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+10, ColourNameToRGB ("white"), 0, 2)
    WindowLine(SBWin, WINDOW_WIDTH-SCROLL_BAR_WIDTH+11, WINDOW_HEIGHT-2, WINDOW_WIDTH-2, WINDOW_HEIGHT-SCROLL_BAR_WIDTH+11, ColourNameToRGB ("dimgray"), 0, 1)
    if #lines >= 1 then
        writeLines()
    end -- if
    Redraw()
end

function fillBuffer(rawstyles)
    local avail = 0
    local line_styles
    -- keep pulling out styles and trying to fit them on the current line
    local styles = copytable.deep (rawstyles)
    while #styles > 0 do
        if avail <= 0 then -- no room available? start new line
            -- remove first line if filled up
            if #lines >= MAX_LINES then
                table.remove (lines, 1)
            end -- if 
            avail = WINDOW_WIDTH - (TEXT_INSET * 2) - 9
            line_styles = {}
            add_line( line_styles )
        end -- line full

        -- get next style, work out how long it is
        local style = table.remove (styles, 1)
        local width = WindowTextWidth (SBWin, "font"..SBWin, style.text)

        -- if it fits, copy whole style in
        if width <= avail then
            table.insert (line_styles, style)
            avail = avail - width
        else -- otherwise, have to split style   
            -- look for trailing space (work backwards). remember where space is
            local col = style.length - 1
            local split_col
            -- keep going until out of columns
            while col > 1 do
                width = WindowTextWidth (SBWin, "font"..SBWin, style.text:sub (1, col)) 
                if width <= avail then
                    if not split_col then
                        split_col = col  -- in case no space found, this is where we can split
                    end -- if
                    -- see if space here
                    if style.text:sub (col, col) == " " then
                        split_col = col
                        break
                    end -- if space
                end -- if will now fit
                col = col - 1
            end -- while
          
            -- if we found a place to split, use old style, and make it shorter. Also make a copy and put the rest in that
            if split_col then
                table.insert (line_styles, style)
                local style_copy = copytable.shallow (style)
                style.text = style.text:sub (1, split_col)
                style.length = split_col 
                style_copy.text = style_copy.text:sub (split_col + 1)
                style_copy.length = #style_copy.text
                table.insert (styles, 1, style_copy)
            elseif next (line_styles) == nil then
                table.insert (line_styles, style)
            else
                table.insert (styles, 1, style)
            end -- if    
            avail = 0  -- now we need to wrap     
        end -- if could not fit whole thing in
    end -- while we still have styles over
end

-- Main capture routine
function chats (name, line, wildcards, styles)
    -- strip out the tag
    tag_length = string.find(styles[1].text,"}")
    styles[1].text = string.sub(styles[1].text, tag_length+1)
    styles[1].length = styles[1].length-tag_length
    
    -- echo in this world as well if the user wants
    if echo then
        for _, v in ipairs (styles) do
            ColourTell (RGBColourToName (v.textcolour),RGBColourToName (v.backcolour),v.text)
        end -- for each style run
        Note ("")  -- wrap up line
    end -- echo wanted

    -- inject timestamp
    tstamp = os.date (date_format)
    styles[1].text = tstamp..styles[1].text
    styles[1].length = styles[1].length+string.len(tstamp)
    
     -- store the raw lines for use during resizing
    if #rawlines >= MAX_LINES then
        table.remove(rawlines, 1)
    end
    table.insert(rawlines, styles)
    
    fillBuffer(styles)
    refresh( )
end -- chats

function add_line ( line )
    -- add new line
    table.insert (lines, line )

    -- advance the count
    if #lines >= WINDOW_LINES then
        lineStart = lineStart + 1
    end -- if
        
    if #lines > 1 then
        lineEnd = lineEnd + 1
    end -- if
end -- add_line

keepscrolling = false
require "wait"

function scrollbar(calledBy)
    wait.make (function()
        while keepscrolling == true do
            if calledBy == "up" then
                if (lineStart > 1) then
                    lineStart = lineStart - 1
                    lineEnd = lineEnd - 1
                else
                    keepscrolling = false
                end
            elseif calledBy == "down" then
                if (lineEnd < #lines) then
                    lineStart = lineStart + 1
                    lineEnd = lineEnd + 1
                else
                    keepscrolling = false
                end
            end
            refresh()
            wait.time(0.1)
        end
    end)
end

function MouseOver(flags, hotspot_id)
    keepscrolling = false
end

function CancelMouseOver(flags, hotspot_id)
    keepscrolling = false
end

function MouseDown(flags, hotspot_id)
    if (hotspot_id == "resize") then
        startx, starty = WindowInfo (SBWinResizer, 17), WindowInfo (SBWinResizer, 18)
    else
        keepscrolling = true
        scrollbar(hotspot_id)
    end
end

function CancelMouseDown(flags, hotspot_id)
    keepscrolling = false
end

function MouseUp(flags, hotspot_id)
    keepscrolling = false
end

function chat_echo (name, line, wildcards)
    if wildcards [1] == false then
        echo = not echo
    elseif wildcards [1]:lower () == " on" then
        echo = true
    elseif wildcards [1]:lower () == " off" then
        echo = false
    end -- if

    if echo then
        ColourNote ("yellow", "", "Echoing chats in main window enabled.")
    else
        ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
    end -- if
end -- chat_echo

]]>
</script>
</muclient>
